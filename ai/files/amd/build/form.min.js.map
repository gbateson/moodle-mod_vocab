{"version":3,"file":"form.min.js","sources":["../src/form.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * mod/vocab/ai/files/amd/src/form.js\n *\n * @module     vocabai_files\n * @copyright  2023 Gordon Bateson (gordon.bateson@gmail.com)\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      Moodle 3.11\n */\n\ndefine([], function(){\n\n    let JS = {};\n\n    /**\n     * Adds an event listener to a DOM element.\n     * @param {Element} obj - The DOM element to which the event listener is added.\n     * @param {string} evt - The name of the event (e.g., \"click\", \"input\").\n     * @param {Function} fn - The callback function to execute when the event is triggered.\n     * @param {boolean} [useCapture=false] - Specifies whether to use event capturing or bubbling.\n     */\n    JS.add_event_listener = function(obj, evt, fn, useCapture) {\n        if (obj.addEventListener) {\n            obj.addEventListener(evt, fn, (useCapture || false));\n        } else if (obj.attachEvent) {\n            obj.attachEvent('on' + evt, fn);\n        }\n    };\n\n    /**\n     * Initializes the module by adjusting input text widths and textarea heights\n     * for specific DOM elements.\n     */\n    JS.init = function() {\n        JS.fix_inputtext_width(['id_filedescription', 'id_exportfileelements_exportfile']);\n    };\n\n    /**\n     * Determines if a given element is within a collapsed fieldset.\n     * @param {Element} elm - The DOM element to check.\n     * @returns {boolean} `true` if the element is within a collapsed fieldset; otherwise, `false`.\n     */\n    JS.is_collapsed = function(elm) {\n        const fieldset = elm.closest(\"fieldset.collapsible\");\n        return (fieldset && fieldset.matches(\".collapsed\"));\n    };\n\n    /**\n     * Dynamically sets the width or height of an element based on its content.\n     * @param {Element} elm - The DOM element to adjust (input or textarea).\n     * @param {string} size - The dimension to adjust (\"width\" or \"height\").\n     */\n    JS.guess_and_set_size = function(elm, size) {\n        const tmp = Object.assign(\n            document.createElement(elm.tagName), {\n                'type': (elm.type || ''),\n                'value': (elm.value || ''),\n                'className': (elm.className || ''),\n                'style': 'visibility: hidden;',\n            }\n        );\n        document.body.appendChild(tmp);\n        switch (size) {\n            case 'width':\n                tmp.style.width = \"auto\";\n                elm.style.width = (tmp.scrollWidth + 6) + \"px\";\n                break;\n            case 'height':\n                tmp.style.height = \"auto\";\n                elm.style.height = (tmp.scrollHeight + 6) + \"px\";\n                break;\n        }\n        tmp.remove();\n    };\n\n    /**\n     * Adjusts the width of input text fields dynamically.\n     * @param {string[]|string} ids - An array of element IDs or a comma-separated string of IDs.\n     */\n    JS.fix_inputtext_width = function(ids) {\n        if (typeof(ids) === 'string') {\n            ids = ids.split(',').map((id) => id.trim());\n        }\n        ids.forEach(function(id){\n            const inputtext = document.getElementById(id);\n            if (inputtext && inputtext.matches('input[type=\"text\"]')) {\n                // Add event listener that adjusts width to accommodate content.\n                JS.add_event_listener(inputtext, 'input', function() {\n                    this.style.width = 'auto'; // Reset width temporarily\n                    this.style.width = (this.scrollWidth + 6) + \"px\"; // Adjust width\n                });\n                if (JS.is_collapsed(inputtext)) {\n                    JS.guess_and_set_size(inputtext, 'width');\n                } else {\n                    inputtext.dispatchEvent(new Event('input'));\n                }\n            }\n        });\n    };\n\n    /**\n     * Adjusts the height of textarea elements dynamically.\n     * @param {string[]|string} ids - An array of element IDs or a comma-separated string of IDs.\n     */\n    JS.fix_textarea_height = function(ids) {\n        if (typeof(ids) === 'string') {\n            ids = ids.split(',').map((id) => id.trim());\n        }\n        ids.forEach(function(id){\n            const textarea = document.getElementById(id);\n            if (textarea && textarea.matches('textarea')) {\n                // Add event listener that adjusts height to accommodate content.\n                JS.add_event_listener(textarea, 'input', function() {\n                    this.style.height = 'auto'; // Reset height temporarily\n                    this.style.height = (this.scrollHeight + 6) + 'px'; // Adjust height\n                });\n                if (JS.is_collapsed(textarea)) {\n                    JS.guess_and_set_size(textarea, 'height');\n                } else {\n                    textarea.dispatchEvent(new Event('input'));\n                }\n            }\n        });\n    };\n\n    return JS;\n});"],"names":["define","JS","obj","evt","fn","useCapture","addEventListener","attachEvent","fix_inputtext_width","elm","fieldset","closest","matches","size","tmp","Object","assign","document","createElement","tagName","type","value","className","body","appendChild","style","width","scrollWidth","height","scrollHeight","remove","ids","split","map","id","trim","forEach","inputtext","getElementById","add_event_listener","this","is_collapsed","guess_and_set_size","dispatchEvent","Event","textarea"],"mappings":";;;;;;;;AAwBAA,4BAAO,IAAI,eAEHC,GAAK,CASTA,mBAAwB,SAASC,IAAKC,IAAKC,GAAIC,YACvCH,IAAII,iBACJJ,IAAII,iBAAiBH,IAAKC,GAAKC,aAAc,GACtCH,IAAIK,aACXL,IAAIK,YAAY,KAAOJ,IAAKC,KAQpCH,KAAU,WACNA,GAAGO,oBAAoB,CAAC,qBAAsB,sCAQlDP,aAAkB,SAASQ,WACjBC,SAAWD,IAAIE,QAAQ,+BACrBD,UAAYA,SAASE,QAAQ,eAQzCX,mBAAwB,SAASQ,IAAKI,YAC5BC,IAAMC,OAAOC,OACfC,SAASC,cAAcT,IAAIU,SAAU,MACxBV,IAAIW,MAAQ,SACXX,IAAIY,OAAS,aACTZ,IAAIa,WAAa,SACtB,+BAGjBL,SAASM,KAAKC,YAAYV,KAClBD,UACC,QACDC,IAAIW,MAAMC,MAAQ,OAClBjB,IAAIgB,MAAMC,MAASZ,IAAIa,YAAc,EAAK,eAEzC,SACDb,IAAIW,MAAMG,OAAS,OACnBnB,IAAIgB,MAAMG,OAAUd,IAAIe,aAAe,EAAK,KAGpDf,IAAIgB,UAOR7B,oBAAyB,SAAS8B,KACV,iBAATA,MACPA,IAAMA,IAAIC,MAAM,KAAKC,KAAKC,IAAOA,GAAGC,UAExCJ,IAAIK,SAAQ,SAASF,UACXG,UAAYpB,SAASqB,eAAeJ,IACtCG,WAAaA,UAAUzB,QAAQ,wBAE/BX,GAAGsC,mBAAmBF,UAAW,SAAS,gBACjCZ,MAAMC,MAAQ,YACdD,MAAMC,MAASc,KAAKb,YAAc,EAAK,QAE5C1B,GAAGwC,aAAaJ,WAChBpC,GAAGyC,mBAAmBL,UAAW,SAEjCA,UAAUM,cAAc,IAAIC,MAAM,eAUlD3C,oBAAyB,SAAS8B,KACV,iBAATA,MACPA,IAAMA,IAAIC,MAAM,KAAKC,KAAKC,IAAOA,GAAGC,UAExCJ,IAAIK,SAAQ,SAASF,UACXW,SAAW5B,SAASqB,eAAeJ,IACrCW,UAAYA,SAASjC,QAAQ,cAE7BX,GAAGsC,mBAAmBM,SAAU,SAAS,gBAChCpB,MAAMG,OAAS,YACfH,MAAMG,OAAUY,KAAKX,aAAe,EAAK,QAE9C5B,GAAGwC,aAAaI,UAChB5C,GAAGyC,mBAAmBG,SAAU,UAEhCA,SAASF,cAAc,IAAIC,MAAM,uBAM1C3C"}