/**
 * mod/vocab/tool/questionbank/amd/src/form.js
 *
 * @module     vocabtool_questionbank
 * @copyright  2023 Gordon Bateson (gordon.bateson@gmail.com)
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @since      Moodle 3.11
 */
define("vocabtool_questionbank/form",[],(function(){let JS={add_event_listener:function(obj,evt,fn,useCapture){obj.addEventListener?obj.addEventListener(evt,fn,useCapture||!1):obj.attachEvent&&obj.attachEvent("on"+evt,fn)},init:function(){this.init_selectall(),this.init_checkboxes()},init_selectall:function(){const selectall=document.querySelector('input[type="checkbox"][name="selectedwords[selectall]"]');if(selectall){JS.add_event_listener(selectall,"click",JS.onclick_selectall);const label=selectall.closest("label");if(label){label.classList.contains("d-none")&&label.classList.remove("d-none"),label.classList.add("btn","btn-light","border-dark"),label.classList.add("align-self-start","px-2","py-0");const p=label.closest(".fcontainer").querySelector(".col-form-label p");p&&p.replaceWith(label)}}},onclick_selectall:function(){const checked=this.checked,s='input[type="checkbox"][name^="'+this.name.substr(0,this.name.indexOf("["))+'"]';this.closest("fieldset").querySelectorAll(s).forEach((function(cb){cb.checked=checked}));let txt="";if(txt=checked?this.dataset.deselectall||"":this.dataset.selectall||"",txt){const label=this.closest("label");if(label){for(let i=label.childNodes.length-1;i>=0;i--){const n=label.childNodes[i];3==n.nodeType&&label.removeChild(n)}label.appendChild(document.createTextNode(txt))}}return!0},init_checkboxes:function(){document.querySelectorAll('input[type="checkbox"][name^="selectedwords"]').forEach((function(cb){JS.add_event_listener(cb,"click",JS.onclick_checkbox)}))},onclick_checkbox:function(evt){const felement=this.closest(".felement");if(null===felement)return!0;const dataclicked='input[type="checkbox"][data-clicked="1"]',cb_start=felement.querySelector(dataclicked),cb_stop=evt.currentTarget;let unclickall=!1,clickme=!0;if(evt.shiftKey)if(cb_start){let found=!1,startstop=!1;felement.querySelectorAll('input[type="checkbox"]').forEach((function(cb){startstop=cb==cb_start||cb==cb_stop,(found||startstop)&&(cb.checked=evt.currentTarget.checked,startstop&&(found=!found))})),unclickall=!0}else clickme=!0;else unclickall=!0,clickme=!0;unclickall&&felement.querySelectorAll(dataclicked).forEach((function(cb){cb.removeAttribute("data-clicked")})),clickme&&evt.currentTarget.setAttribute("data-clicked","1")}};return JS}));

//# sourceMappingURL=form.min.js.map