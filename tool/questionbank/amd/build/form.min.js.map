{"version":3,"file":"form.min.js","sources":["../src/form.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle. If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * mod/vocab/tool/questionbank/amd/src/form.js\n *\n * @module vocabtool_questionbank\n * @copyright 2023 Gordon Bateson (gordon.bateson@gmail.com)\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since Moodle 3.11\n */\n\ndefine(['core/str'], function(STR){\n\n    let JS = {};\n    window.JS = JS;\n\n    /*\n     * Initialize the str object to hold language strings.\n     */\n    JS.str = {};\n\n    /**\n     * Adds a cross-browser event listener to the specified element.\n     *\n     * @param {Element} obj The DOM element to attach the event to.\n     * @param {string} evt The event type (e.g., 'click', 'input').\n     * @param {Function} fn The callback function to execute when the event fires.\n     * @param {boolean} [useCapture=false] Whether to use capture phase (optional).\n     */\n    JS.add_event_listener = function(obj, evt, fn, useCapture) {\n        if (obj.addEventListener) {\n            obj.addEventListener(evt, fn, (useCapture || false));\n        } else if (obj.attachEvent) {\n            obj.attachEvent('on' + evt, fn);\n        }\n    };\n\n    /**\n     * Initializes all custom JavaScript enhancements on page load.\n     *\n     * Runs setup functions for log selection checkboxes,\n     * dynamic textareas, word selection, and custom name helpers.\n     */\n    JS.init = function() {\n\n        // These functions do not need strings from Moodle.\n        JS.init_selectall_logs();\n        JS.init_select_subset_logs();\n        JS.init_select_subset_defaults();\n        JS.init_textareas_logs();\n        JS.init_selectall_words();\n        JS.init_checkboxes_words();\n        JS.init_prompt();\n\n        STR.get_strings([\n            {\"key\": \"default\", \"component\": \"moodle\"},\n            {\"key\": \"addname\", \"component\": \"vocabtool_questionbank\"},\n            {\"key\": \"addtags\", \"component\": \"vocabtool_questionbank\"},\n        ]).done(function(s) {\n            let i = 0;\n            JS.str.default = s[i++];\n            JS.str.addname = s[i++];\n            JS.str.addtags = s[i++];\n            JS.init_bulk_edit();\n            JS.init_custom_names();\n        });\n    };\n\n    /**\n     * Initializes the  checkbox to select all logs and makes it visible if hidden.\n     *\n     * Attaches a click handler to toggle all checkboxes within the log fieldset.\n     */\n    JS.init_selectall_logs = function(){\n        const s = 'input[type=\"checkbox\"][name=\"logids[0]\"]';\n        const selectall = document.querySelector(s);\n        if (selectall) {\n            JS.add_event_listener(selectall, 'click', JS.onclick_selectall);\n            if (selectall.classList.contains(\"d-none\")) {\n                selectall.classList.remove(\"d-none\");\n            }\n        }\n    };\n\n    /**\n     * Enables user to select/deselect a subset of log records.\n     */\n    JS.init_select_subset_logs = function(){\n        JS.init_select_subset_table(\"logids[\", \"]\");\n    };\n\n    /**\n     * Enables user to select/deselect a subset of default values.\n     */\n    JS.init_select_subset_defaults = function(){\n        JS.init_select_subset_table(\"defaultfields[\", \"]\");\n    };\n\n    /**\n     * Enables user to select/deselect a subset of checkboxes for log records.\n     *\n     * @param {string} prefix for checkbox elements.\n     * @param {string} suffix for checkbox elements.\n     */\n    JS.init_select_subset_table = function(prefix, suffix){\n        const table = document.getElementById(\"questionbanklog_table\");\n        if (table) {\n            let s = 'input[type=\"checkbox\"]';\n            if (prefix) {\n                s += '[name^=\"' + prefix + '\"]';\n            }\n            if (suffix) {\n                s += '[name$=\"' + suffix + '\"]';\n            }\n            JS.init_select_subset(table, s);\n        }\n    };\n\n    /**\n     * Enables the user to select or deselect a contiguous subset of checkboxes\n     * by clicking one checkbox and then Shift-clicking another. All checkboxes\n     * in between will adopt the checked state of the second (Shift-clicked) checkbox.\n     *\n     * @param {object} elm DOM element containing the checkboxes.\n     * @param {string} s Selector string to extract checkboxes.\n     */\n    JS.init_select_subset = function(elm, s){\n        let lastClickedIndex = null;\n        const checkboxes = Array.from(elm.querySelectorAll(s));\n        checkboxes.forEach((checkbox, index) => {\n            checkbox.addEventListener(\"click\", function (event) {\n                if (event.shiftKey && lastClickedIndex !== null) {\n                    const currentIndex = index;\n                    const mini = Math.min(lastClickedIndex, currentIndex);\n                    const maxi = Math.max(lastClickedIndex, currentIndex);\n                    const newState = this.checked;\n                    for (let i = mini; i <= maxi; i++) {\n                        checkboxes[i].checked = newState;\n                    }\n                }\n                lastClickedIndex = index;\n            });\n        });\n    };\n\n    /**\n     * Automatically resizes textarea elements for log fields as the user types.\n     *\n     * Targets fields such as error, prompt, and results textareas in the log editing form.\n     */\n    JS.init_textareas_logs = function(){\n        const s = '#id_log_error, #id_log_prompt, #id_log_results';\n        document.querySelectorAll(s).forEach(function(textarea){\n            // Add event listener that adjusts height to accommodate content.\n            JS.add_event_listener(textarea, 'input', function(){\n                this.style.height = 'auto'; // '1px' also works\n                this.style.height = (this.scrollHeight + 6) + 'px';\n            });\n            textarea.dispatchEvent(new Event('input'));\n        });\n    };\n\n    /**\n     * Initializes the \"select all words\" checkbox and repositions its label.\n     *\n     * Attaches a click handler and restyles the label to enhance appearance and usability.\n     */\n    JS.init_selectall_words = function(){\n        const s = 'input[type=\"checkbox\"][name=\"selectedwords[selectall]\"]';\n        const selectall = document.querySelector(s);\n        if (selectall) {\n\n            JS.add_event_listener(selectall, 'click', JS.onclick_selectall);\n\n            const label = selectall.closest('label');\n            if (label) {\n                if (label.classList.contains('d-none')) {\n                    label.classList.remove('d-none');\n                }\n                label.classList.add('btn', 'btn-light', 'border-dark');\n                label.classList.add('align-self-start', 'px-2', 'py-0');\n\n                const p = label.closest('.fcontainer').querySelector('.col-form-label p');\n                if (p) {\n                    p.replaceWith(label);\n                }\n            }\n        }\n    };\n\n    /**\n     * Handles toggling of all checkboxes in a group when \"select all\" is clicked.\n     *\n     * Updates the state of checkboxes with the same name prefix and adjusts the label text\n     * based on data attributes (`data-selectall` and `data-deselectall`).\n     *\n     * @returns {boolean} Always returns true.\n     */\n    JS.onclick_selectall = function(){\n        const checked = this.checked;\n\n        // Check/uncheck all other checkboxes in this fieldset\n        // that have the same name prefix, e.g. \"selectedwords\".\n        const nameprefix = this.name.substr(0, this.name.indexOf('['));\n        const s = 'input[type=\"checkbox\"][name^=\"' + nameprefix + '\"]';\n        this.closest('fieldset').querySelectorAll(s).forEach(function(cb){\n            cb.checked = checked;\n        });\n\n        // Set new text for this checkbox.\n        let txt = '';\n        if (checked) {\n            txt = this.dataset.deselectall || '';\n        } else {\n            txt = this.dataset.selectall || '';\n        }\n        if (txt) {\n            // Locate the label for this checkbox.\n            const label = this.closest('label');\n            if (label) {\n                // Remove existing text nodes in this label.\n                for (let i = (label.childNodes.length - 1); i >= 0 ; i--) {\n                    const n = label.childNodes[i];\n                    if (n.nodeType == 3) {\n                        label.removeChild(n);\n                    }\n                }\n                // Add new text in a node at the end of the label.\n                label.appendChild(document.createTextNode(txt));\n            }\n        }\n        return true;\n    };\n\n    /**\n     * Attaches click event listeners to individual word selection checkboxes.\n     *\n     * Enables shift-click selection and click tracking for batch operations.\n     */\n    JS.init_checkboxes_words = function(){\n        const s = 'input[type=\"checkbox\"][name^=\"selectedwords\"]';\n        document.querySelectorAll(s).forEach(function(cb){\n            JS.add_event_listener(cb, 'click', JS.onclick_checkbox);\n        });\n    };\n\n    /**\n     * Handles checkbox click events for word selection, including shift-click support.\n     *\n     * Supports selecting a range of checkboxes when holding Shift, and tracks the\n     * last clicked checkbox using a `data-clicked` attribute.\n     *\n     * @param {MouseEvent} evt The click event object.\n     */\n    JS.onclick_checkbox = function(evt){\n\n        const felement = this.closest('.felement');\n        if (felement === null) {\n            return true;\n        }\n\n        const checkboxes = 'input[type=\"checkbox\"]';\n        const dataclicked = checkboxes + '[data-clicked=\"1\"]';\n\n        const cb_start = felement.querySelector(dataclicked);\n        const cb_stop = evt.currentTarget;\n\n        let unclickall = false;\n        let clickme = true;\n\n        if (evt.shiftKey) {\n            if (cb_start) {\n                let found = false;\n                let startstop = false;\n                felement.querySelectorAll(checkboxes).forEach(function(cb){\n                    startstop = (cb == cb_start || cb == cb_stop);\n                    if (found || startstop) {\n                        cb.checked = evt.currentTarget.checked;\n                        if (startstop) {\n                            found = (found ? false : true);\n                        }\n                    }\n\n                });\n                unclickall = true;\n            } else {\n                clickme = true;\n            }\n        } else {\n            unclickall = true;\n            clickme = true;\n        }\n\n        if (unclickall) {\n            felement.querySelectorAll(dataclicked).forEach(function(cb){\n                cb.removeAttribute('data-clicked');\n            });\n        }\n\n        if (clickme) {\n            evt.currentTarget.setAttribute('data-clicked', '1');\n        }\n    };\n\n    /*\n     * Setup radio buttons and checkboxes to allow bulk editing of multiple logs.\n     */\n    JS.init_bulk_edit = function(){\n        return false;\n        const logrecords = document.querySelector(\"#id_logrecords\");\n        if (logrecords === null) {\n            return false;\n        }\n        const h3 = logrecords.querySelector(\"h3\");\n        if (h3 === null) {\n            return false;\n        }\n        const tbl = logrecords.querySelector(\"#questionbanklog_table\");\n        if (tbl === null) {\n            return false;\n        }\n        const thead = tbl.querySelector(\"thead\");\n        const tbody = tbl.querySelector(\"tbody\");\n        if (thead === null || tbody === null) {\n            return false;\n        }\n\n        const tr1 = thead.querySelector(\"tr\");\n        if (tr1 === null) {\n            return false;\n        }\n\n        const tr2 = document.createElement(\"tr\");\n        //tr2.classList.add(\"d-none\");\n\n        let wordcol = -1;\n        tr1.querySelectorAll(\"th\").forEach(function(th1, col) {\n            const th2 = th1.cloneNode(false);\n            const fieldname = (th1.dataset.fieldname || \"\");\n            if (fieldname == \"\" || fieldname == \"wordid\") {\n                // Append non-breaking space.\n                th2.appendChild(document.createTextNode('\\xA0'));\n                if (fieldname == \"wordid\") {\n                    wordcol = col;\n                }\n            } else {\n                th2.classList.add(\"text-center\");\n                const cb = Object.assign(document.createElement(\"input\"), {\n                    type: \"checkbox\",\n                    name: \"bulkselect[\" + fieldname + \"]\",\n                    value: \"1\",\n                    className: \"bulk-checkbox\",\n                });\n                th2.appendChild(cb);\n            }\n            tr2.appendChild(th2);\n        });\n\n        thead.appendChild(tr2);\n\n        if (wordcol >= 0) {\n            // Insert an empty <th> after wordcol in each <tr> in <thead>\n            thead.querySelectorAll(\"tr\").forEach(function(tr, i) {\n                const th = document.createElement(\"th\");\n                th.appendChild(document.createTextNode(i ? \"\" : JS.str.default));\n                tr.insertBefore(th, tr.children[wordcol + 1] || null);\n            });\n\n            // Insert an empty <td> after wordcol in each <tr> in <tbody>\n            tbody.querySelectorAll(\"tr\").forEach(function(tr) {\n                const logid = tr.querySelector('input[type=\"checkbox\"]').value;\n                const radio = Object.assign(document.createElement(\"input\"), {\n                    \"type\": \"radio\",\n                    \"value\": logid,\n                    \"name\": \"defaultlogid\",\n                });\n                const td = Object.assign(document.createElement(\"td\"), {\n                    \"className\": \"text-center\",\n                });\n                td.appendChild(radio);\n                tr.insertBefore(td, tr.children[wordcol + 1] || null);\n            });\n        }\n    };\n\n    /**\n     * Sets up custom name buttons for both subcategory and question tag inputs.\n     *\n     * Calls init_custom_name() with appropriate selectors to initialize UI enhancements\n     * for subcategory and tag entry fields.\n     */\n    JS.init_custom_names = function(){\n        JS.init_custom_name(\"[name='subcat[name]']\", \".subcatnames\", \"addname\");\n        JS.init_custom_name(\"[name='qtag[name]']\", \".tagnames\", \"addtags\");\n    };\n\n    /**\n     * Enhances a custom name input by displaying a list of previously used names with a button.\n     *\n     * This function searches the log table for matching name entries, builds a summary string,\n     * and injects a button + label near the specified input field. Clicking the button inserts\n     * the names into the input and ensures the associated checkbox is checked.\n     *\n     * @param {string} sourceselector CSS selector for the input[type=\"text\"] element to target.\n     * @param {string} targetselector CSS selector for the <ul> elements containing <li> items with previous names.\n     * @param {string} strname the name of the STR item to use as button text.\n     */\n    JS.init_custom_name = function(sourceselector, targetselector, strname){\n        let elm = document.querySelector(sourceselector);\n        let fitem = elm.closest(\".fitem\");\n        let table = document.querySelector(\"#questionbanklog_table\");\n        if (table) {\n            let allnames = []; // Cache of customnames.\n            table.querySelectorAll(targetselector).forEach(function(ul){\n                let names = [];\n                ul.querySelectorAll(\"li\").forEach(function(li){\n                    names.push(li.innerText);\n                });\n                if (names.length) {\n                    names = names.join(\", \");\n                    if (allnames.indexOf(names) < 0) {\n                        allnames.push(names);\n                        let separator = Object.assign(document.createElement(\"span\"), {\n                            \"className\": \"w-100\",\n                        });\n                        let div = Object.assign(document.createElement(\"div\"), {\n                            \"className\": \"rounded border border-warning bg-light ml-4 my-1 pr-2 customnames\",\n                        });\n                        div.appendChild(\n                            Object.assign(document.createElement(\"button\"), {\n                                \"className\": \"btn btn-warning ml-0 py-1 px-2\",\n                                \"onclick\": JS.onclick_add_tags,\n                                \"textContent\": JS.str[strname],\n                            })\n                        );\n                        div.appendChild(\n                            Object.assign(document.createElement(\"span\"), {\n                                \"className\": \"ml-2\",\n                                \"textContent\": names,\n                            })\n                        );\n                        fitem.parentNode.insertBefore(separator, fitem.nextSibling);\n                        separator.parentNode.insertBefore(div, separator.nextSibling);\n                    }\n                }\n            });\n        }\n    };\n\n    /**\n     * Handles click event on the \"Add tags\" button.\n     *\n     * Transfers a list of names from the adjacent <span> into the associated text input field\n     * in the same .fitem block. Also locates the previous .fitem containing a checkbox\n     * and ensures it is checked. Finally, the button is blurred to remove focus.\n     *\n     * @param {MouseEvent} evt The click event object.\n     */\n    JS.onclick_add_tags = function(evt) {\n        evt.preventDefault();\n\n        let btn = evt.currentTarget;\n        let div = btn.closest(\".customnames\");\n        let span = btn.nextElementSibling;\n        if (div && span) {\n\n            let inputfitem = JS.get_previous_sibling(div, \".fitem\");\n            if (inputfitem) {\n\n                let input = inputfitem.querySelector(\"input[type='text']\");\n                if (input) {\n\n                    // Transfer previously used names to the input element.\n                    input.value = span.textContent.trim();\n\n                    // Switch off the disabled flag.\n                    if (input.disabled) {\n                        input.disabled = false;\n                    }\n\n                    // Locate previous inputfitem sibling.\n                    let checkboxfitem = JS.get_previous_sibling(inputfitem, \".fitem\");\n                    if (checkboxfitem) {\n                        let checkbox = checkboxfitem.querySelector(\"input[type='checkbox']\");\n                        if (checkbox) {\n                            checkbox.checked = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        btn.blur();\n        return false;\n    };\n\n    /**\n     * Initializes the prompt dropdown menu with default settings and event listeners.\n     */\n    JS.init_prompt = function(){\n        const p = document.querySelector(\"select[name='prompt']\");\n        if (p) {\n\n            // Collect names of select elements in this section of the form.\n            let selectnames = [\"questionreview\"];\n            const s = \"select:not([name='prompt'])\";\n            p.closest(\".fcontainer\").querySelectorAll(s).forEach(function(select){\n                selectnames.push(select.name);\n            });\n            p.dataset.selectnames = selectnames.join(\",\");\n\n            // Set up onchange event handler.\n            JS.add_event_listener(p, 'change', function(evt){\n                const elm = evt.target;\n\n                let selectnames = elm.dataset.selectnames;\n                if (selectnames) {\n                    selectnames = selectnames.split(\",\");\n                }\n\n                let option = elm.options[elm.selectedIndex];\n                let defaults = option.dataset.defaults;\n                if (defaults) {\n                    defaults = JSON.parse(defaults);\n                }\n\n                for (let n in defaults) {\n                    let v = defaults[n];\n                    if (n == \"qtypes\") {\n                        JS.set_qtypes(v);\n                    } else if (n == \"subcattypes\") {\n                        JS.set_checkboxes(\"subcat\", v);\n                    } else if (n == \"subcatname\") {\n                        JS.set_customname(\"subcat\", v);\n                    } else if (n == \"tagtypes\") {\n                        JS.set_checkboxes(\"qtag\", v);\n                    } else if (n == \"tagnames\") {\n                        JS.set_customname(\"qtag\", v);\n                    } else {\n                        JS.set_promptfield(n, v, selectnames);\n                    }\n                }\n\n                // Unset any select elements that were not set above.\n                selectnames.forEach(function(name){\n                    const s = \"select[name='\" + name + \"']\";\n                    const select = document.querySelector(s);\n                    if (select) {\n                        select.options[0].selected = true;\n                    }\n                });\n            });\n            p.dispatchEvent(new Event(\"change\"));\n        }\n    };\n\n    /**\n     * Sets the state of question type checkboxes based on the provided configuration.\n     *\n     * @param {object} qtypes - An object mapping question type names to format IDs.\n     */\n    JS.set_qtypes = function(qtypes){\n        const s = \"#id_questiontypescontainer .felement\";\n        document.querySelectorAll(s).forEach(function(felement){\n            const enable = felement.querySelector(\n                \"input[type='checkbox'][name$='[enable]']\"\n            );\n            const format = felement.querySelector(\n                \"select[name$='[format]']\"\n            );\n            if (enable && format) {\n                const i = enable.name.indexOf(\"[\");\n                const t = enable.name.substr(0, i);\n                if (qtypes[t]) {\n                    // The qtype \"n\" is required.\n                    if (enable.checked == false) {\n                        enable.checked = true;\n                        enable.dispatchEvent(new Event(\"click\"));\n                    }\n                    const formatid = qtypes[t];\n                    const option = format.querySelector(\"option[value='\" + formatid + \"']\");\n                    if (option && option.selected == false) {\n                        option.selected = true;\n                    }\n                } else {\n                    // The qtype \"n\" is NOT required.\n                    if (enable.checked == true) {\n                        enable.checked = false;\n                        enable.dispatchEvent(new Event(\"click\"));\n                        format.options[0].selected = true;\n                    }\n                }\n            }\n        });\n    };\n\n    /**\n     * Sets the checked state of checkboxes matching the specified name prefix.\n     *\n     * @param {string} name - The name prefix to match checkboxes against.\n     * @param {number} value - The bitwise value to use for determining the checked state.\n     */\n    JS.set_checkboxes = function(name, value){\n        const r = new RegExp(\"^\" + name + \"\\\\[(\\\\d+)\\\\]$\");\n        const s = \"input[type='checkbox'][name^='\" + name + \"['][name$=']']\";\n        document.querySelectorAll(s).forEach(function(cb){\n            const m = cb.name.match(r);\n            if (m && m[0]) {\n                // Determine whether or not this CB should be checked.\n                const i = (value & parseInt(m[1])); // eslint-disable-line no-bitwise\n                let checked = (i == 0 ? false : true);\n\n                // For the \"Custom name\" checkbox, we ignore the default and set the\n                // checked flag depending on whether or not the custom field has a value.\n                const fitem = JS.get_next_sibling(cb.closest(\".fitem\"), \".fitem\");\n                if (fitem) {\n                    const input = fitem.querySelector(\"input[type='text']\");\n                    if (input) {\n                        checked = (input.value ? true : false);\n                    }\n                }\n\n                if (cb.checked == checked) {\n                    return; // No change required.\n                }\n\n                cb.checked = checked;\n                cb.dispatchEvent(new Event(\"click\"));\n            }\n        });\n    };\n\n\n    /**\n     * Sets the value of a custom name input and checks the corresponding checkbox.\n     *\n     * @param {string} name - The name prefix for the input and checkbox elements.\n     * @param {string} value - The value to set in the input field.\n     * @returns {boolean} True if the custom name was successfully set, false otherwise.\n     */\n    JS.set_customname = function(name, value){\n        const s = {\n            \"checkbox\": \"input[type='checkbox'][name^='\" + name + \"']\",\n            \"input\": \"input[type='text'][name='\" + name + \"[name]']\",\n            \"fitem\": \".fitem\",\n        };\n        const input = document.querySelector(s.input);\n        if (input === null) {\n            return false;\n        }\n\n        const fitem = JS.get_previous_sibling(input.closest(s.fitem), s.fitem);\n        if (fitem === null) {\n            return false;\n        }\n\n        const cb = fitem.querySelector(s.checkbox);\n        if (cb === null) {\n            return false;\n        }\n\n        // Don't override any existing name in the custom name field.\n        if (input.value == \"\") {\n            input.value = value;\n            if (cb.checked == false) {\n                cb.checked = true;\n                cb.dispatchEvent(new Event(\"click\"));\n            }\n        }\n    };\n\n    /**\n     * Sets the value of a prompt field based on the provided name and value.\n     *\n     * This function locates the target form element by its name attribute,\n     * sets the value for text inputs, and selects the appropriate option\n     * for select elements. If the element is a select, its name is removed\n     * from the selectnames array to avoid being processed later.\n     *\n     * @param {string} name - The name attribute of the target form element.\n     * @param {string} value - The value to set for the target element.\n     * @param {string[]} selectnames - An array of select element names that still need processing.\n     */\n    JS.set_promptfield = function(name, value, selectnames){\n        // Locate the target form element.\n        const elm = document.querySelector(\"[name='\" + name + \"']\");\n        if (elm) {\n\n            // The target is a <select> element.\n            if (elm.tagName == \"SELECT\") {\n\n                // Remove the element's name from the selectnames array.\n                const i = selectnames.indexOf(name);\n                if (i >= 0) {\n                    selectnames.splice(i, 1);\n                }\n\n                // Locate the option with the matching value.\n                const s = \"option[value='\" + value + \"']\";\n                const option = elm.querySelector(s);\n\n                // If the option exists and is not already selected, select it.\n                if (option && option.selected == false) {\n                    option.selected = true;\n                }\n\n            // The target is a text input element.\n            } else if (elm.tagName == \"INPUT\" && elm.type == \"text\") {\n                elm.value = value;\n            }\n        }\n    };\n\n    /**\n     * Retrieves the previous sibling element that matches the specified selector.\n     *\n     * @param {Element} elm - The element to start searching from.\n     * @param {string} selector - The CSS selector to match the sibling against.\n     * @returns {Element|null} The matching previous sibling, or null if none is found.\n     */\n    JS.get_previous_sibling = function(elm, selector){\n        if (! selector) {\n            selector = \"\";\n        }\n        let sibling = elm.previousElementSibling;\n        while (sibling) {\n            if (selector == \"\" || sibling.matches(selector)) {\n                return sibling;\n            }\n            sibling = sibling.previousElementSibling;\n        }\n        return null;\n    };\n\n    /**\n     * Retrieves the next sibling element that matches the specified selector.\n     *\n     * @param {Element} elm - The element to start searching from.\n     * @param {string} selector - The CSS selector to match the sibling against.\n     * @returns {Element|null} The matching next sibling, or null if none is found.\n     */\n    JS.get_next_sibling = function(elm, selector){\n        if (! selector) {\n            selector = \"\";\n        }\n        let sibling = elm.nextElementSibling;\n        while (sibling) {\n            if (selector == \"\" || sibling.matches(selector)) {\n                return sibling;\n            }\n            sibling = sibling.nextElementSibling;\n        }\n        return null;\n    };\n\n    return JS;\n});"],"names":["define","STR","JS","window","str","add_event_listener","obj","evt","fn","useCapture","addEventListener","attachEvent","init","init_selectall_logs","init_select_subset_logs","init_select_subset_defaults","init_textareas_logs","init_selectall_words","init_checkboxes_words","init_prompt","get_strings","done","s","i","default","addname","addtags","init_bulk_edit","init_custom_names","selectall","document","querySelector","onclick_selectall","classList","contains","remove","init_select_subset_table","prefix","suffix","table","getElementById","init_select_subset","elm","lastClickedIndex","checkboxes","Array","from","querySelectorAll","forEach","checkbox","index","event","shiftKey","currentIndex","mini","Math","min","maxi","max","newState","this","checked","textarea","style","height","scrollHeight","dispatchEvent","Event","label","closest","add","p","replaceWith","name","substr","indexOf","cb","txt","dataset","deselectall","childNodes","length","n","nodeType","removeChild","appendChild","createTextNode","onclick_checkbox","felement","dataclicked","cb_start","cb_stop","currentTarget","unclickall","clickme","found","startstop","removeAttribute","setAttribute","init_custom_name","sourceselector","targetselector","strname","fitem","allnames","ul","names","li","push","innerText","join","separator","Object","assign","createElement","div","onclick_add_tags","parentNode","insertBefore","nextSibling","preventDefault","btn","span","nextElementSibling","inputfitem","get_previous_sibling","input","value","textContent","trim","disabled","checkboxfitem","blur","selectnames","select","target","split","defaults","options","selectedIndex","JSON","parse","v","set_qtypes","set_checkboxes","set_customname","set_promptfield","selected","qtypes","enable","format","t","formatid","option","r","RegExp","m","match","parseInt","get_next_sibling","tagName","splice","type","selector","sibling","previousElementSibling","matches"],"mappings":";;;;;;;;AAwBAA,qCAAO,CAAC,aAAa,SAASC,SAEtBC,GAAK,UACTC,OAAOD,GAAKA,GAKZA,GAAGE,IAAM,GAUTF,GAAGG,mBAAqB,SAASC,IAAKC,IAAKC,GAAIC,YACvCH,IAAII,iBACJJ,IAAII,iBAAiBH,IAAKC,GAAKC,aAAc,GACtCH,IAAIK,aACXL,IAAIK,YAAY,KAAOJ,IAAKC,KAUpCN,GAAGU,KAAO,WAGNV,GAAGW,sBACHX,GAAGY,0BACHZ,GAAGa,8BACHb,GAAGc,sBACHd,GAAGe,uBACHf,GAAGgB,wBACHhB,GAAGiB,cAEHlB,IAAImB,YAAY,CACZ,KAAQ,oBAAwB,UAChC,KAAQ,oBAAwB,0BAChC,KAAQ,oBAAwB,4BACjCC,MAAK,SAASC,OACTC,EAAI,EACRrB,GAAGE,IAAIoB,QAAUF,EAAEC,KACnBrB,GAAGE,IAAIqB,QAAUH,EAAEC,KACnBrB,GAAGE,IAAIsB,QAAUJ,EAAEC,KACnBrB,GAAGyB,iBACHzB,GAAG0B,wBASX1B,GAAGW,oBAAsB,iBAEfgB,UAAYC,SAASC,cADjB,4CAENF,YACA3B,GAAGG,mBAAmBwB,UAAW,QAAS3B,GAAG8B,mBACzCH,UAAUI,UAAUC,SAAS,WAC7BL,UAAUI,UAAUE,OAAO,YAQvCjC,GAAGY,wBAA0B,WACzBZ,GAAGkC,yBAAyB,UAAW,MAM3ClC,GAAGa,4BAA8B,WAC7Bb,GAAGkC,yBAAyB,iBAAkB,MASlDlC,GAAGkC,yBAA2B,SAASC,OAAQC,cACrCC,MAAQT,SAASU,eAAe,4BAClCD,MAAO,KACHjB,EAAI,yBACJe,SACAf,GAAK,WAAae,OAAS,MAE3BC,SACAhB,GAAK,WAAagB,OAAS,MAE/BpC,GAAGuC,mBAAmBF,MAAOjB,KAYrCpB,GAAGuC,mBAAqB,SAASC,IAAKpB,OAC9BqB,iBAAmB,WACjBC,WAAaC,MAAMC,KAAKJ,IAAIK,iBAAiBzB,IACnDsB,WAAWI,SAAQ,CAACC,SAAUC,SAC1BD,SAASvC,iBAAiB,SAAS,SAAUyC,UACrCA,MAAMC,UAAiC,OAArBT,iBAA2B,OACvCU,aAAeH,MACfI,KAAOC,KAAKC,IAAIb,iBAAkBU,cAClCI,KAAOF,KAAKG,IAAIf,iBAAkBU,cAClCM,SAAWC,KAAKC,YACjB,IAAItC,EAAI+B,KAAM/B,GAAKkC,KAAMlC,IAC1BqB,WAAWrB,GAAGsC,QAAUF,SAGhChB,iBAAmBO,aAU/BhD,GAAGc,oBAAsB,WAErBc,SAASiB,iBADC,kDACmBC,SAAQ,SAASc,UAE1C5D,GAAGG,mBAAmByD,SAAU,SAAS,gBAChCC,MAAMC,OAAS,YACfD,MAAMC,OAAUJ,KAAKK,aAAe,EAAK,QAElDH,SAASI,cAAc,IAAIC,MAAM,cASzCjE,GAAGe,qBAAuB,iBAEhBY,UAAYC,SAASC,cADjB,8DAENF,UAAW,CAEX3B,GAAGG,mBAAmBwB,UAAW,QAAS3B,GAAG8B,yBAEvCoC,MAAQvC,UAAUwC,QAAQ,YAC5BD,MAAO,CACHA,MAAMnC,UAAUC,SAAS,WACzBkC,MAAMnC,UAAUE,OAAO,UAE3BiC,MAAMnC,UAAUqC,IAAI,MAAO,YAAa,eACxCF,MAAMnC,UAAUqC,IAAI,mBAAoB,OAAQ,cAE1CC,EAAIH,MAAMC,QAAQ,eAAetC,cAAc,qBACjDwC,GACAA,EAAEC,YAAYJ,UAc9BlE,GAAG8B,kBAAoB,iBACb6B,QAAUD,KAAKC,QAKfvC,EAAI,iCADSsC,KAAKa,KAAKC,OAAO,EAAGd,KAAKa,KAAKE,QAAQ,MACC,UACrDN,QAAQ,YAAYtB,iBAAiBzB,GAAG0B,SAAQ,SAAS4B,IAC1DA,GAAGf,QAAUA,eAIbgB,IAAM,MAENA,IADAhB,QACMD,KAAKkB,QAAQC,aAAe,GAE5BnB,KAAKkB,QAAQjD,WAAa,GAEhCgD,IAAK,OAECT,MAAQR,KAAKS,QAAQ,YACvBD,MAAO,KAEF,IAAI7C,EAAK6C,MAAMY,WAAWC,OAAS,EAAI1D,GAAK,EAAIA,IAAK,OAChD2D,EAAId,MAAMY,WAAWzD,GACT,GAAd2D,EAAEC,UACFf,MAAMgB,YAAYF,GAI1Bd,MAAMiB,YAAYvD,SAASwD,eAAeT,cAG3C,GAQX3E,GAAGgB,sBAAwB,WAEvBY,SAASiB,iBADC,iDACmBC,SAAQ,SAAS4B,IAC1C1E,GAAGG,mBAAmBuE,GAAI,QAAS1E,GAAGqF,sBAY9CrF,GAAGqF,iBAAmB,SAAShF,WAErBiF,SAAW5B,KAAKS,QAAQ,gBACb,OAAbmB,gBACO,QAILC,YAAc7C,2CAEd8C,SAAWF,SAASzD,cAAc0D,aAClCE,QAAUpF,IAAIqF,kBAEhBC,YAAa,EACbC,SAAU,KAEVvF,IAAI6C,YACAsC,SAAU,KACNK,OAAQ,EACRC,WAAY,EAChBR,SAASzC,iBAbE,0BAa2BC,SAAQ,SAAS4B,IACnDoB,UAAapB,IAAMc,UAAYd,IAAMe,SACjCI,OAASC,aACTpB,GAAGf,QAAUtD,IAAIqF,cAAc/B,QAC3BmC,YACAD,OAASA,WAKrBF,YAAa,OAEbC,SAAU,OAGdD,YAAa,EACbC,SAAU,EAGVD,YACAL,SAASzC,iBAAiB0C,aAAazC,SAAQ,SAAS4B,IACpDA,GAAGqB,gBAAgB,mBAIvBH,SACAvF,IAAIqF,cAAcM,aAAa,eAAgB,MAOvDhG,GAAGyB,eAAiB,kBACT,GAmFXzB,GAAG0B,kBAAoB,WACnB1B,GAAGiG,iBAAiB,wBAAyB,eAAgB,WAC7DjG,GAAGiG,iBAAiB,sBAAuB,YAAa,YAc5DjG,GAAGiG,iBAAmB,SAASC,eAAgBC,eAAgBC,aAEvDC,MADMzE,SAASC,cAAcqE,gBACjB/B,QAAQ,UACpB9B,MAAQT,SAASC,cAAc,6BAC/BQ,MAAO,KACHiE,SAAW,GACfjE,MAAMQ,iBAAiBsD,gBAAgBrD,SAAQ,SAASyD,QAChDC,MAAQ,MACZD,GAAG1D,iBAAiB,MAAMC,SAAQ,SAAS2D,IACvCD,MAAME,KAAKD,GAAGE,cAEdH,MAAMzB,SACNyB,MAAQA,MAAMI,KAAK,MACfN,SAAS7B,QAAQ+B,OAAS,GAAG,CAC7BF,SAASI,KAAKF,WACVK,UAAYC,OAAOC,OAAOnF,SAASoF,cAAc,QAAS,WAC7C,UAEbC,IAAMH,OAAOC,OAAOnF,SAASoF,cAAc,OAAQ,WACtC,sEAEjBC,IAAI9B,YACA2B,OAAOC,OAAOnF,SAASoF,cAAc,UAAW,WAC/B,yCACFhH,GAAGkH,6BACClH,GAAGE,IAAIkG,YAG9Ba,IAAI9B,YACA2B,OAAOC,OAAOnF,SAASoF,cAAc,QAAS,WAC7B,mBACER,SAGvBH,MAAMc,WAAWC,aAAaP,UAAWR,MAAMgB,aAC/CR,UAAUM,WAAWC,aAAaH,IAAKJ,UAAUQ,mBAgBrErH,GAAGkH,iBAAmB,SAAS7G,KAC3BA,IAAIiH,qBAEAC,IAAMlH,IAAIqF,cACVuB,IAAMM,IAAIpD,QAAQ,gBAClBqD,KAAOD,IAAIE,sBACXR,KAAOO,KAAM,KAETE,WAAa1H,GAAG2H,qBAAqBV,IAAK,aAC1CS,WAAY,KAERE,MAAQF,WAAW7F,cAAc,yBACjC+F,MAAO,CAGPA,MAAMC,MAAQL,KAAKM,YAAYC,OAG3BH,MAAMI,WACNJ,MAAMI,UAAW,OAIjBC,cAAgBjI,GAAG2H,qBAAqBD,WAAY,aACpDO,cAAe,KACXlF,SAAWkF,cAAcpG,cAAc,0BACvCkB,WACAA,SAASY,SAAU,aAOvC4D,IAAIW,QACG,GAMXlI,GAAGiB,YAAc,iBACPoD,EAAIzC,SAASC,cAAc,4BAC7BwC,EAAG,KAGC8D,YAAc,CAAC,wBACb/G,EAAI,8BACViD,EAAEF,QAAQ,eAAetB,iBAAiBzB,GAAG0B,SAAQ,SAASsF,QAC1DD,YAAYzB,KAAK0B,OAAO7D,SAE5BF,EAAEO,QAAQuD,YAAcA,YAAYvB,KAAK,KAGzC5G,GAAGG,mBAAmBkE,EAAG,UAAU,SAAShE,WAClCmC,IAAMnC,IAAIgI,WAEZF,YAAc3F,IAAIoC,QAAQuD,YAC1BA,cACAA,YAAcA,YAAYG,MAAM,UAIhCC,SADS/F,IAAIgG,QAAQhG,IAAIiG,eACP7D,QAAQ2D,SAC1BA,WACAA,SAAWG,KAAKC,MAAMJ,eAGrB,IAAIvD,KAAKuD,SAAU,KAChBK,EAAIL,SAASvD,GACR,UAALA,EACAhF,GAAG6I,WAAWD,GACF,eAAL5D,EACPhF,GAAG8I,eAAe,SAAUF,GAChB,cAAL5D,EACPhF,GAAG+I,eAAe,SAAUH,GAChB,YAAL5D,EACPhF,GAAG8I,eAAe,OAAQF,GACd,YAAL5D,EACPhF,GAAG+I,eAAe,OAAQH,GAE1B5I,GAAGgJ,gBAAgBhE,EAAG4D,EAAGT,aAKjCA,YAAYrF,SAAQ,SAASyB,YACnBnD,EAAI,gBAAkBmD,KAAO,KAC7B6D,OAASxG,SAASC,cAAcT,GAClCgH,SACAA,OAAOI,QAAQ,GAAGS,UAAW,SAIzC5E,EAAEL,cAAc,IAAIC,MAAM,aASlCjE,GAAG6I,WAAa,SAASK,QAErBtH,SAASiB,iBADC,wCACmBC,SAAQ,SAASwC,gBACpC6D,OAAS7D,SAASzD,cACpB,4CAEEuH,OAAS9D,SAASzD,cACpB,+BAEAsH,QAAUC,OAAQ,OACZ/H,EAAI8H,OAAO5E,KAAKE,QAAQ,KACxB4E,EAAIF,OAAO5E,KAAKC,OAAO,EAAGnD,MAC5B6H,OAAOG,GAAI,CAEW,GAAlBF,OAAOxF,UACPwF,OAAOxF,SAAU,EACjBwF,OAAOnF,cAAc,IAAIC,MAAM,iBAE7BqF,SAAWJ,OAAOG,GAClBE,OAASH,OAAOvH,cAAc,iBAAmByH,SAAW,MAC9DC,QAA6B,GAAnBA,OAAON,WACjBM,OAAON,UAAW,QAIA,GAAlBE,OAAOxF,UACPwF,OAAOxF,SAAU,EACjBwF,OAAOnF,cAAc,IAAIC,MAAM,UAC/BmF,OAAOZ,QAAQ,GAAGS,UAAW,QAajDjJ,GAAG8I,eAAiB,SAASvE,KAAMsD,aACzB2B,EAAI,IAAIC,OAAO,IAAMlF,KAAO,iBAC5BnD,EAAI,iCAAmCmD,KAAO,iBACpD3C,SAASiB,iBAAiBzB,GAAG0B,SAAQ,SAAS4B,UACpCgF,EAAIhF,GAAGH,KAAKoF,MAAMH,MACpBE,GAAKA,EAAE,GAAI,KAGP/F,QAAgB,IADTkE,MAAQ+B,SAASF,EAAE,WAKxBrD,MAAQrG,GAAG6J,iBAAiBnF,GAAGP,QAAQ,UAAW,aACpDkC,MAAO,OACDuB,MAAQvB,MAAMxE,cAAc,sBAC9B+F,QACAjE,UAAWiE,MAAMC,UAIrBnD,GAAGf,SAAWA,eAIlBe,GAAGf,QAAUA,QACbe,GAAGV,cAAc,IAAIC,MAAM,eAavCjE,GAAG+I,eAAiB,SAASxE,KAAMsD,aACzBzG,EAAI,UACM,iCAAmCmD,KAAO,WAC7C,4BAA8BA,KAAO,iBACrC,UAEPqD,MAAQhG,SAASC,cAAcT,EAAEwG,UACzB,OAAVA,aACO,QAGLvB,MAAQrG,GAAG2H,qBAAqBC,MAAMzD,QAAQ/C,EAAEiF,OAAQjF,EAAEiF,UAClD,OAAVA,aACO,QAGL3B,GAAK2B,MAAMxE,cAAcT,EAAE2B,aACtB,OAAP2B,UACO,EAIQ,IAAfkD,MAAMC,QACND,MAAMC,MAAQA,MACI,GAAdnD,GAAGf,UACHe,GAAGf,SAAU,EACbe,GAAGV,cAAc,IAAIC,MAAM,aAiBvCjE,GAAGgJ,gBAAkB,SAASzE,KAAMsD,MAAOM,mBAEjC3F,IAAMZ,SAASC,cAAc,UAAY0C,KAAO,SAClD/B,OAGmB,UAAfA,IAAIsH,QAAqB,OAGnBzI,EAAI8G,YAAY1D,QAAQF,MAC1BlD,GAAK,GACL8G,YAAY4B,OAAO1I,EAAG,SAIpBD,EAAI,iBAAmByG,MAAQ,KAC/B0B,OAAS/G,IAAIX,cAAcT,GAG7BmI,QAA6B,GAAnBA,OAAON,WACjBM,OAAON,UAAW,OAIA,SAAfzG,IAAIsH,SAAkC,QAAZtH,IAAIwH,OACrCxH,IAAIqF,MAAQA,QAYxB7H,GAAG2H,qBAAuB,SAASnF,IAAKyH,UAC9BA,WACFA,SAAW,QAEXC,QAAU1H,IAAI2H,4BACXD,SAAS,IACI,IAAZD,UAAkBC,QAAQE,QAAQH,iBAC3BC,QAEXA,QAAUA,QAAQC,8BAEf,MAUXnK,GAAG6J,iBAAmB,SAASrH,IAAKyH,UAC1BA,WACFA,SAAW,QAEXC,QAAU1H,IAAIiF,wBACXyC,SAAS,IACI,IAAZD,UAAkBC,QAAQE,QAAQH,iBAC3BC,QAEXA,QAAUA,QAAQzC,0BAEf,MAGJzH"}