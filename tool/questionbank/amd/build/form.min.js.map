{"version":3,"file":"form.min.js","sources":["../src/form.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle. If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * mod/vocab/tool/questionbank/amd/src/form.js\n *\n * @module vocabtool_questionbank\n * @copyright 2023 Gordon Bateson (gordon.bateson@gmail.com)\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since Moodle 3.11\n */\n\ndefine(['core/str'], function(STR){\n\n    let JS = {};\n    window.JS = JS;\n\n    /*\n     * Initialize the str object to hold language strings.\n     */\n    JS.str = {};\n\n    /**\n     * Adds a cross-browser event listener to the specified element.\n     *\n     * @param {Element} obj The DOM element to attach the event to.\n     * @param {string} evt The event type (e.g., 'click', 'input').\n     * @param {Function} fn The callback function to execute when the event fires.\n     * @param {boolean} [useCapture=false] Whether to use capture phase (optional).\n     */\n    JS.add_event_listener = function(obj, evt, fn, useCapture) {\n        if (obj.addEventListener) {\n            obj.addEventListener(evt, fn, (useCapture || false));\n        } else if (obj.attachEvent) {\n            obj.attachEvent('on' + evt, fn);\n        }\n    };\n\n    /**\n     * Initializes all custom JavaScript enhancements on page load.\n     *\n     * Runs setup functions for log selection checkboxes,\n     * dynamic textareas, word selection, and custom name helpers.\n     */\n    JS.init = function() {\n\n        // These functions do not need strings from Moodle.\n        JS.init_selectall_logs();\n        JS.init_textareas_logs();\n        JS.init_selectall_words();\n        JS.init_checkboxes_words();\n        JS.init_prompt();\n\n        STR.get_strings([\n            {\"key\": \"addname\", \"component\": \"vocabtool_questionbank\"},\n            {\"key\": \"addtags\", \"component\": \"vocabtool_questionbank\"},\n        ]).done(function(s) {\n            let i = 0;\n            JS.str.addname = s[i++];\n            JS.str.addtags = s[i++];\n            JS.init_custom_names();\n        });\n    };\n\n    /**\n     * Initializes the \"select all logs\" checkbox and makes it visible if hidden.\n     *\n     * Attaches a click handler to toggle all checkboxes within the log fieldset.\n     */\n    JS.init_selectall_logs = function(){\n        const s = 'input[type=\"checkbox\"][name=\"logids[selectall]\"]';\n        const selectall = document.querySelector(s);\n        if (selectall) {\n            JS.add_event_listener(selectall, 'click', JS.onclick_selectall);\n            if (selectall.classList.contains(\"d-none\")) {\n                selectall.classList.remove(\"d-none\");\n            }\n        }\n    };\n\n    /**\n     * Automatically resizes textarea elements for log fields as the user types.\n     *\n     * Targets fields such as error, prompt, and results textareas in the log editing form.\n     */\n    JS.init_textareas_logs = function(){\n        const s = '#id_log_error, #id_log_prompt, #id_log_results';\n        document.querySelectorAll(s).forEach(function(textarea){\n            // Add event listener that adjusts height to accommodate content.\n            JS.add_event_listener(textarea, 'input', function(){\n                this.style.height = 'auto'; // '1px' also works\n                this.style.height = (this.scrollHeight + 6) + 'px';\n            });\n            textarea.dispatchEvent(new Event('input'));\n        });\n    };\n\n    /**\n     * Initializes the \"select all words\" checkbox and repositions its label.\n     *\n     * Attaches a click handler and restyles the label to enhance appearance and usability.\n     */\n    JS.init_selectall_words = function(){\n        const s = 'input[type=\"checkbox\"][name=\"selectedwords[selectall]\"]';\n        const selectall = document.querySelector(s);\n        if (selectall) {\n\n            JS.add_event_listener(selectall, 'click', JS.onclick_selectall);\n\n            const label = selectall.closest('label');\n            if (label) {\n                if (label.classList.contains('d-none')) {\n                    label.classList.remove('d-none');\n                }\n                label.classList.add('btn', 'btn-light', 'border-dark');\n                label.classList.add('align-self-start', 'px-2', 'py-0');\n\n                const p = label.closest('.fcontainer').querySelector('.col-form-label p');\n                if (p) {\n                    p.replaceWith(label);\n                }\n            }\n        }\n    };\n\n    /**\n     * Handles toggling of all checkboxes in a group when \"select all\" is clicked.\n     *\n     * Updates the state of checkboxes with the same name prefix and adjusts the label text\n     * based on data attributes (`data-selectall` and `data-deselectall`).\n     *\n     * @returns {boolean} Always returns true.\n     */\n    JS.onclick_selectall = function(){\n        const checked = this.checked;\n\n        // Check/uncheck all other checkboxes in this fieldset\n        // that have the same name prefix, e.g. \"selectedwords\".\n        const nameprefix = this.name.substr(0, this.name.indexOf('['));\n        const s = 'input[type=\"checkbox\"][name^=\"' + nameprefix + '\"]';\n        this.closest('fieldset').querySelectorAll(s).forEach(function(cb){\n            cb.checked = checked;\n        });\n\n        // Set new text for this checkbox.\n        let txt = '';\n        if (checked) {\n            txt = this.dataset.deselectall || '';\n        } else {\n            txt = this.dataset.selectall || '';\n        }\n        if (txt) {\n            // Locate the label for this checkbox.\n            const label = this.closest('label');\n            if (label) {\n                // Remove existing text nodes in this label.\n                for (let i = (label.childNodes.length - 1); i >= 0 ; i--) {\n                    const n = label.childNodes[i];\n                    if (n.nodeType == 3) {\n                        label.removeChild(n);\n                    }\n                }\n                // Add new text in a node at the end of the label.\n                label.appendChild(document.createTextNode(txt));\n            }\n        }\n        return true;\n    };\n\n    /**\n     * Attaches click event listeners to individual word selection checkboxes.\n     *\n     * Enables shift-click selection and click tracking for batch operations.\n     */\n    JS.init_checkboxes_words = function(){\n        const s = 'input[type=\"checkbox\"][name^=\"selectedwords\"]';\n        document.querySelectorAll(s).forEach(function(cb){\n            JS.add_event_listener(cb, 'click', JS.onclick_checkbox);\n        });\n    };\n\n    /**\n     * Handles checkbox click events for word selection, including shift-click support.\n     *\n     * Supports selecting a range of checkboxes when holding Shift, and tracks the\n     * last clicked checkbox using a `data-clicked` attribute.\n     *\n     * @param {MouseEvent} evt The click event object.\n     */\n    JS.onclick_checkbox = function(evt){\n\n        const felement = this.closest('.felement');\n        if (felement === null) {\n            return true;\n        }\n\n        const checkboxes = 'input[type=\"checkbox\"]';\n        const dataclicked = checkboxes + '[data-clicked=\"1\"]';\n\n        const cb_start = felement.querySelector(dataclicked);\n        const cb_stop = evt.currentTarget;\n\n        let unclickall = false;\n        let clickme = true;\n\n        if (evt.shiftKey) {\n            if (cb_start) {\n                let found = false;\n                let startstop = false;\n                felement.querySelectorAll(checkboxes).forEach(function(cb){\n                    startstop = (cb == cb_start || cb == cb_stop);\n                    if (found || startstop) {\n                        cb.checked = evt.currentTarget.checked;\n                        if (startstop) {\n                            found = (found ? false : true);\n                        }\n                    }\n\n                });\n                unclickall = true;\n            } else {\n                clickme = true;\n            }\n        } else {\n            unclickall = true;\n            clickme = true;\n        }\n\n        if (unclickall) {\n            felement.querySelectorAll(dataclicked).forEach(function(cb){\n                cb.removeAttribute('data-clicked');\n            });\n        }\n\n        if (clickme) {\n            evt.currentTarget.setAttribute('data-clicked', '1');\n        }\n    };\n\n    /**\n     * Sets up custom name buttons for both subcategory and question tag inputs.\n     *\n     * Calls init_custom_name() with appropriate selectors to initialize UI enhancements\n     * for subcategory and tag entry fields.\n     */\n    JS.init_custom_names = function(){\n        JS.init_custom_name(\"[name='subcat[name]']\", \".subcatnames\", \"addname\");\n        JS.init_custom_name(\"[name='qtag[name]']\", \".tagnames\", \"addtags\");\n    };\n\n    /**\n     * Enhances a custom name input by displaying a list of previously used names with a button.\n     *\n     * This function searches the log table for matching name entries, builds a summary string,\n     * and injects a button + label near the specified input field. Clicking the button inserts\n     * the names into the input and ensures the associated checkbox is checked.\n     *\n     * @param {string} sourceselector CSS selector for the input[type=\"text\"] element to target.\n     * @param {string} targetselector CSS selector for the <ul> elements containing <li> items with previous names.\n     * @param {string} strname the name of the STR item to use as button text.\n     */\n    JS.init_custom_name = function(sourceselector, targetselector, strname){\n        let elm = document.querySelector(sourceselector);\n        let fitem = elm.closest(\".fitem\");\n        let table = document.querySelector(\"#questionbanklog_table\");\n        let allnames = []; // Cache of customnames.\n        table.querySelectorAll(targetselector).forEach(function(ul){\n            let names = [];\n            ul.querySelectorAll(\"li\").forEach(function(li){\n                names.push(li.innerText);\n            });\n            if (names.length) {\n                names = names.join(\", \");\n                if (allnames.indexOf(names) < 0) {\n                    allnames.push(names);\n\n                    let separator = Object.assign(document.createElement(\"span\"), {\n                        \"className\": \"w-100\",\n                    });\n                    let div = Object.assign(document.createElement(\"div\"), {\n                        \"className\": \"rounded border border-warning bg-light ml-4 my-1 pr-2 customnames\",\n                    });\n                    div.appendChild(\n                        Object.assign(document.createElement(\"button\"), {\n                            \"className\": \"btn btn-warning ml-0 py-1 px-2\",\n                            \"onclick\": JS.onclick_add_tags,\n                            \"textContent\": JS.str[strname],\n                        })\n                    );\n                    div.appendChild(\n                        Object.assign(document.createElement(\"span\"), {\n                            \"className\": \"ml-2\",\n                            \"textContent\": names,\n                        })\n                    );\n                    fitem.parentNode.insertBefore(separator, fitem.nextSibling);\n                    separator.parentNode.insertBefore(div, separator.nextSibling);\n                }\n            }\n        });\n    };\n\n    /**\n     * Handles click event on the \"Add tags\" button.\n     *\n     * Transfers a list of names from the adjacent <span> into the associated text input field\n     * in the same .fitem block. Also locates the previous .fitem containing a checkbox\n     * and ensures it is checked. Finally, the button is blurred to remove focus.\n     *\n     * @param {MouseEvent} evt The click event object.\n     */\n    JS.onclick_add_tags = function(evt) {\n        evt.preventDefault();\n\n        let btn = evt.currentTarget;\n        let div = btn.closest(\".customnames\");\n        let span = btn.nextElementSibling;\n        if (div && span) {\n\n            let inputfitem = JS.get_previous_sibling(div, \".fitem\");\n            if (inputfitem) {\n\n                let input = inputfitem.querySelector(\"input[type='text']\");\n                if (input) {\n\n                    // Transfer previously used names to the input element.\n                    input.value = span.textContent.trim();\n\n                    // Switch off the disabled flag.\n                    if (input.disabled) {\n                        input.disabled = false;\n                    }\n\n                    // Locate previous inputfitem sibling.\n                    let checkboxfitem = JS.get_previous_sibling(inputfitem, \".fitem\");\n                    if (checkboxfitem) {\n                        let checkbox = checkboxfitem.querySelector(\"input[type='checkbox']\");\n                        if (checkbox) {\n                            checkbox.checked = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        btn.blur();\n        return false;\n    };\n\n    /**\n     * Initializes the prompt dropdown menu with default settings and event listeners.\n     */\n    JS.init_prompt = function(){\n        const p = document.querySelector(\"select[name='prompt']\");\n        if (p) {\n\n            // Collect names of select elements in this section of the form.\n            let selectnames = [\"questionreview\"];\n            const s = \"select:not([name='prompt'])\";\n            p.closest(\".fcontainer\").querySelectorAll(s).forEach(function(select){\n                selectnames.push(select.name);\n            });\n            p.dataset.selectnames = selectnames.join(\",\");\n\n            // Set up onchange event handler.\n            JS.add_event_listener(p, 'change', function(evt){\n                const elm = evt.target;\n\n                let selectnames = elm.dataset.selectnames;\n                if (selectnames) {\n                    selectnames = selectnames.split(\",\");\n                }\n\n                let option = elm.options[elm.selectedIndex];\n                let defaults = option.dataset.defaults;\n                if (defaults) {\n                    defaults = JSON.parse(defaults);\n                }\n\n                for (let n in defaults) {\n                    let v = defaults[n];\n                    if (n == \"qtypes\") {\n                        JS.set_qtypes(v);\n                    } else if (n == \"subcattypes\") {\n                        JS.set_checkboxes(\"subcat\", v);\n                    } else if (n == \"subcatname\") {\n                        JS.set_customname(\"subcat\", v);\n                    } else if (n == \"tagtypes\") {\n                        JS.set_checkboxes(\"qtag\", v);\n                    } else if (n == \"tagnames\") {\n                        JS.set_customname(\"qtag\", v);\n                    } else {\n                        JS.set_promptfield(n, v, selectnames);\n                    }\n                }\n\n                // Unset any select elements that were not set above.\n                selectnames.forEach(function(name){\n                    const s = \"select[name='\" + name + \"']\";\n                    const select = document.querySelector(s);\n                    if (select) {\n                        select.options[0].selected = true;\n                    }\n                });\n            });\n            p.dispatchEvent(new Event(\"change\"));\n        }\n    };\n\n    /**\n     * Sets the state of question type checkboxes based on the provided configuration.\n     *\n     * @param {object} qtypes - An object mapping question type names to format IDs.\n     */\n    JS.set_qtypes = function(qtypes){\n        const s = \"#id_questiontypescontainer .felement\";\n        document.querySelectorAll(s).forEach(function(felement){\n            const enable = felement.querySelector(\n                \"input[type='checkbox'][name$='[enable]']\"\n            );\n            const format = felement.querySelector(\n                \"select[name$='[format]']\"\n            );\n            if (enable && format) {\n                const i = enable.name.indexOf(\"[\");\n                const t = enable.name.substr(0, i);\n                if (qtypes[t]) {\n                    // The qtype \"n\" is required.\n                    if (enable.checked == false) {\n                        enable.checked = true;\n                        enable.dispatchEvent(new Event(\"click\"));\n                    }\n                    const formatid = qtypes[t];\n                    const option = format.querySelector(\"option[value='\" + formatid + \"']\");\n                    if (option && option.selected == false) {\n                        option.selected = true;\n                    }\n                } else {\n                    // The qtype \"n\" is NOT required.\n                    if (enable.checked == true) {\n                        enable.checked = false;\n                        enable.dispatchEvent(new Event(\"click\"));\n                        format.options[0].selected = true;\n                    }\n                }\n            }\n        });\n    };\n\n    /**\n     * Sets the checked state of checkboxes matching the specified name prefix.\n     *\n     * @param {string} name - The name prefix to match checkboxes against.\n     * @param {number} value - The bitwise value to use for determining the checked state.\n     */\n    JS.set_checkboxes = function(name, value){\n        const r = new RegExp(\"^\" + name + \"\\\\[(\\\\d+)\\\\]$\");\n        const s = \"input[type='checkbox'][name^='\" + name + \"['][name$=']']\";\n        document.querySelectorAll(s).forEach(function(cb){\n            const m = cb.name.match(r);\n            if (m && m[0]) {\n                // Determine whether or not this CB should be checked.\n                const i = (value & parseInt(m[1])); // eslint-disable-line no-bitwise\n                let checked = (i == 0 ? false : true);\n\n                // For the \"Custom name\" checkbox, we ignore the default and set the\n                // checked flag depending on whether or not the custom field has a value.\n                const fitem = JS.get_next_sibling(cb.closest(\".fitem\"), \".fitem\");\n                if (fitem) {\n                    const input = fitem.querySelector(\"input[type='text']\");\n                    if (input) {\n                        checked = (input.value ? true : false);\n                    }\n                }\n\n                if (cb.checked == checked) {\n                    return; // No change required.\n                }\n\n                cb.checked = checked;\n                cb.dispatchEvent(new Event(\"click\"));\n            }\n        });\n    };\n\n\n    /**\n     * Sets the value of a custom name input and checks the corresponding checkbox.\n     *\n     * @param {string} name - The name prefix for the input and checkbox elements.\n     * @param {string} value - The value to set in the input field.\n     * @returns {boolean} True if the custom name was successfully set, false otherwise.\n     */\n    JS.set_customname = function(name, value){\n        const s = {\n            \"checkbox\": \"input[type='checkbox'][name^='\" + name + \"']\",\n            \"input\": \"input[type='text'][name='\" + name + \"[name]']\",\n            \"fitem\": \".fitem\",\n        };\n        const input = document.querySelector(s.input);\n        if (input === null) {\n            return false;\n        }\n\n        const fitem = JS.get_previous_sibling(input.closest(s.fitem), s.fitem);\n        if (fitem === null) {\n            return false;\n        }\n\n        const cb = fitem.querySelector(s.checkbox);\n        if (cb === null) {\n            return false;\n        }\n\n        // Don't override any existing name in the custom name field.\n        if (input.value == \"\") {\n            input.value = value;\n            if (cb.checked == false) {\n                cb.checked = true;\n                cb.dispatchEvent(new Event(\"click\"));\n            }\n        }\n    };\n\n    /**\n     * Sets the value of a prompt field based on the provided name and value.\n     *\n     * This function locates the target form element by its name attribute,\n     * sets the value for text inputs, and selects the appropriate option\n     * for select elements. If the element is a select, its name is removed\n     * from the selectnames array to avoid being processed later.\n     *\n     * @param {string} name - The name attribute of the target form element.\n     * @param {string} value - The value to set for the target element.\n     * @param {string[]} selectnames - An array of select element names that still need processing.\n     */\n    JS.set_promptfield = function(name, value, selectnames){\n        // Locate the target form element.\n        const elm = document.querySelector(\"[name='\" + name + \"']\");\n        if (elm) {\n\n            // The target is a <select> element.\n            if (elm.tagName == \"SELECT\") {\n\n                // Remove the element's name from the selectnames array.\n                const i = selectnames.indexOf(name);\n                if (i >= 0) {\n                    selectnames.splice(i, 1);\n                }\n\n                // Locate the option with the matching value.\n                const s = \"option[value='\" + value + \"']\";\n                const option = elm.querySelector(s);\n\n                // If the option exists and is not already selected, select it.\n                if (option && option.selected == false) {\n                    option.selected = true;\n                }\n\n            // The target is a text input element.\n            } else if (elm.tagName == \"INPUT\" && elm.type == \"text\") {\n                elm.value = value;\n            }\n        }\n    };\n\n    /**\n     * Retrieves the previous sibling element that matches the specified selector.\n     *\n     * @param {Element} elm - The element to start searching from.\n     * @param {string} selector - The CSS selector to match the sibling against.\n     * @returns {Element|null} The matching previous sibling, or null if none is found.\n     */\n    JS.get_previous_sibling = function(elm, selector){\n        if (! selector) {\n            selector = \"\";\n        }\n        let sibling = elm.previousElementSibling;\n        while (sibling) {\n            if (selector == \"\" || sibling.matches(selector)) {\n                return sibling;\n            }\n            sibling = sibling.previousElementSibling;\n        }\n        return null;\n    };\n\n    /**\n     * Retrieves the next sibling element that matches the specified selector.\n     *\n     * @param {Element} elm - The element to start searching from.\n     * @param {string} selector - The CSS selector to match the sibling against.\n     * @returns {Element|null} The matching next sibling, or null if none is found.\n     */\n    JS.get_next_sibling = function(elm, selector){\n        if (! selector) {\n            selector = \"\";\n        }\n        let sibling = elm.nextElementSibling;\n        while (sibling) {\n            if (selector == \"\" || sibling.matches(selector)) {\n                return sibling;\n            }\n            sibling = sibling.nextElementSibling;\n        }\n        return null;\n    };\n\n    return JS;\n});"],"names":["define","STR","JS","window","str","add_event_listener","obj","evt","fn","useCapture","addEventListener","attachEvent","init","init_selectall_logs","init_textareas_logs","init_selectall_words","init_checkboxes_words","init_prompt","get_strings","done","s","i","addname","addtags","init_custom_names","selectall","document","querySelector","onclick_selectall","classList","contains","remove","querySelectorAll","forEach","textarea","style","height","this","scrollHeight","dispatchEvent","Event","label","closest","add","p","replaceWith","checked","name","substr","indexOf","cb","txt","dataset","deselectall","childNodes","length","n","nodeType","removeChild","appendChild","createTextNode","onclick_checkbox","felement","dataclicked","checkboxes","cb_start","cb_stop","currentTarget","unclickall","clickme","shiftKey","found","startstop","removeAttribute","setAttribute","init_custom_name","sourceselector","targetselector","strname","fitem","table","allnames","ul","names","li","push","innerText","join","separator","Object","assign","createElement","div","onclick_add_tags","parentNode","insertBefore","nextSibling","preventDefault","btn","span","nextElementSibling","inputfitem","get_previous_sibling","input","value","textContent","trim","disabled","checkboxfitem","checkbox","blur","selectnames","select","elm","target","split","defaults","options","selectedIndex","JSON","parse","v","set_qtypes","set_checkboxes","set_customname","set_promptfield","selected","qtypes","enable","format","t","formatid","option","r","RegExp","m","match","parseInt","get_next_sibling","tagName","splice","type","selector","sibling","previousElementSibling","matches"],"mappings":";;;;;;;;AAwBAA,qCAAO,CAAC,aAAa,SAASC,SAEtBC,GAAK,UACTC,OAAOD,GAAKA,GAKZA,GAAGE,IAAM,GAUTF,GAAGG,mBAAqB,SAASC,IAAKC,IAAKC,GAAIC,YACvCH,IAAII,iBACJJ,IAAII,iBAAiBH,IAAKC,GAAKC,aAAc,GACtCH,IAAIK,aACXL,IAAIK,YAAY,KAAOJ,IAAKC,KAUpCN,GAAGU,KAAO,WAGNV,GAAGW,sBACHX,GAAGY,sBACHZ,GAAGa,uBACHb,GAAGc,wBACHd,GAAGe,cAEHhB,IAAIiB,YAAY,CACZ,KAAQ,oBAAwB,0BAChC,KAAQ,oBAAwB,4BACjCC,MAAK,SAASC,OACTC,EAAI,EACRnB,GAAGE,IAAIkB,QAAUF,EAAEC,KACnBnB,GAAGE,IAAImB,QAAUH,EAAEC,KACnBnB,GAAGsB,wBASXtB,GAAGW,oBAAsB,iBAEfY,UAAYC,SAASC,cADjB,oDAENF,YACAvB,GAAGG,mBAAmBoB,UAAW,QAASvB,GAAG0B,mBACzCH,UAAUI,UAAUC,SAAS,WAC7BL,UAAUI,UAAUE,OAAO,YAUvC7B,GAAGY,oBAAsB,WAErBY,SAASM,iBADC,kDACmBC,SAAQ,SAASC,UAE1ChC,GAAGG,mBAAmB6B,SAAU,SAAS,gBAChCC,MAAMC,OAAS,YACfD,MAAMC,OAAUC,KAAKC,aAAe,EAAK,QAElDJ,SAASK,cAAc,IAAIC,MAAM,cASzCtC,GAAGa,qBAAuB,iBAEhBU,UAAYC,SAASC,cADjB,8DAENF,UAAW,CAEXvB,GAAGG,mBAAmBoB,UAAW,QAASvB,GAAG0B,yBAEvCa,MAAQhB,UAAUiB,QAAQ,YAC5BD,MAAO,CACHA,MAAMZ,UAAUC,SAAS,WACzBW,MAAMZ,UAAUE,OAAO,UAE3BU,MAAMZ,UAAUc,IAAI,MAAO,YAAa,eACxCF,MAAMZ,UAAUc,IAAI,mBAAoB,OAAQ,cAE1CC,EAAIH,MAAMC,QAAQ,eAAef,cAAc,qBACjDiB,GACAA,EAAEC,YAAYJ,UAc9BvC,GAAG0B,kBAAoB,iBACbkB,QAAUT,KAAKS,QAKf1B,EAAI,iCADSiB,KAAKU,KAAKC,OAAO,EAAGX,KAAKU,KAAKE,QAAQ,MACC,UACrDP,QAAQ,YAAYV,iBAAiBZ,GAAGa,SAAQ,SAASiB,IAC1DA,GAAGJ,QAAUA,eAIbK,IAAM,MAENA,IADAL,QACMT,KAAKe,QAAQC,aAAe,GAE5BhB,KAAKe,QAAQ3B,WAAa,GAEhC0B,IAAK,OAECV,MAAQJ,KAAKK,QAAQ,YACvBD,MAAO,KAEF,IAAIpB,EAAKoB,MAAMa,WAAWC,OAAS,EAAIlC,GAAK,EAAIA,IAAK,OAChDmC,EAAIf,MAAMa,WAAWjC,GACT,GAAdmC,EAAEC,UACFhB,MAAMiB,YAAYF,GAI1Bf,MAAMkB,YAAYjC,SAASkC,eAAeT,cAG3C,GAQXjD,GAAGc,sBAAwB,WAEvBU,SAASM,iBADC,iDACmBC,SAAQ,SAASiB,IAC1ChD,GAAGG,mBAAmB6C,GAAI,QAAShD,GAAG2D,sBAY9C3D,GAAG2D,iBAAmB,SAAStD,WAErBuD,SAAWzB,KAAKK,QAAQ,gBACb,OAAboB,gBACO,QAILC,YAAcC,2CAEdC,SAAWH,SAASnC,cAAcoC,aAClCG,QAAU3D,IAAI4D,kBAEhBC,YAAa,EACbC,SAAU,KAEV9D,IAAI+D,YACAL,SAAU,KACNM,OAAQ,EACRC,WAAY,EAChBV,SAAS9B,iBAbE,0BAa2BC,SAAQ,SAASiB,IACnDsB,UAAatB,IAAMe,UAAYf,IAAMgB,SACjCK,OAASC,aACTtB,GAAGJ,QAAUvC,IAAI4D,cAAcrB,QAC3B0B,YACAD,OAASA,WAKrBH,YAAa,OAEbC,SAAU,OAGdD,YAAa,EACbC,SAAU,EAGVD,YACAN,SAAS9B,iBAAiB+B,aAAa9B,SAAQ,SAASiB,IACpDA,GAAGuB,gBAAgB,mBAIvBJ,SACA9D,IAAI4D,cAAcO,aAAa,eAAgB,MAUvDxE,GAAGsB,kBAAoB,WACnBtB,GAAGyE,iBAAiB,wBAAyB,eAAgB,WAC7DzE,GAAGyE,iBAAiB,sBAAuB,YAAa,YAc5DzE,GAAGyE,iBAAmB,SAASC,eAAgBC,eAAgBC,aAEvDC,MADMrD,SAASC,cAAciD,gBACjBlC,QAAQ,UACpBsC,MAAQtD,SAASC,cAAc,0BAC/BsD,SAAW,GACfD,MAAMhD,iBAAiB6C,gBAAgB5C,SAAQ,SAASiD,QAChDC,MAAQ,MACZD,GAAGlD,iBAAiB,MAAMC,SAAQ,SAASmD,IACvCD,MAAME,KAAKD,GAAGE,cAEdH,MAAM5B,SACN4B,MAAQA,MAAMI,KAAK,MACfN,SAAShC,QAAQkC,OAAS,GAAG,CAC7BF,SAASI,KAAKF,WAEVK,UAAYC,OAAOC,OAAOhE,SAASiE,cAAc,QAAS,WAC7C,UAEbC,IAAMH,OAAOC,OAAOhE,SAASiE,cAAc,OAAQ,WACtC,sEAEjBC,IAAIjC,YACA8B,OAAOC,OAAOhE,SAASiE,cAAc,UAAW,WAC/B,yCACFzF,GAAG2F,6BACC3F,GAAGE,IAAI0E,YAG9Bc,IAAIjC,YACA8B,OAAOC,OAAOhE,SAASiE,cAAc,QAAS,WAC7B,mBACER,SAGvBJ,MAAMe,WAAWC,aAAaP,UAAWT,MAAMiB,aAC/CR,UAAUM,WAAWC,aAAaH,IAAKJ,UAAUQ,kBAejE9F,GAAG2F,iBAAmB,SAAStF,KAC3BA,IAAI0F,qBAEAC,IAAM3F,IAAI4D,cACVyB,IAAMM,IAAIxD,QAAQ,gBAClByD,KAAOD,IAAIE,sBACXR,KAAOO,KAAM,KAETE,WAAanG,GAAGoG,qBAAqBV,IAAK,aAC1CS,WAAY,KAERE,MAAQF,WAAW1E,cAAc,yBACjC4E,MAAO,CAGPA,MAAMC,MAAQL,KAAKM,YAAYC,OAG3BH,MAAMI,WACNJ,MAAMI,UAAW,OAIjBC,cAAgB1G,GAAGoG,qBAAqBD,WAAY,aACpDO,cAAe,KACXC,SAAWD,cAAcjF,cAAc,0BACvCkF,WACAA,SAAS/D,SAAU,aAOvCoD,IAAIY,QACG,GAMX5G,GAAGe,YAAc,iBACP2B,EAAIlB,SAASC,cAAc,4BAC7BiB,EAAG,KAGCmE,YAAc,CAAC,wBACb3F,EAAI,8BACVwB,EAAEF,QAAQ,eAAeV,iBAAiBZ,GAAGa,SAAQ,SAAS+E,QAC1DD,YAAY1B,KAAK2B,OAAOjE,SAE5BH,EAAEQ,QAAQ2D,YAAcA,YAAYxB,KAAK,KAGzCrF,GAAGG,mBAAmBuC,EAAG,UAAU,SAASrC,WAClC0G,IAAM1G,IAAI2G,WAEZH,YAAcE,IAAI7D,QAAQ2D,YAC1BA,cACAA,YAAcA,YAAYI,MAAM,UAIhCC,SADSH,IAAII,QAAQJ,IAAIK,eACPlE,QAAQgE,SAC1BA,WACAA,SAAWG,KAAKC,MAAMJ,eAGrB,IAAI5D,KAAK4D,SAAU,KAChBK,EAAIL,SAAS5D,GACR,UAALA,EACAtD,GAAGwH,WAAWD,GACF,eAALjE,EACPtD,GAAGyH,eAAe,SAAUF,GAChB,cAALjE,EACPtD,GAAG0H,eAAe,SAAUH,GAChB,YAALjE,EACPtD,GAAGyH,eAAe,OAAQF,GACd,YAALjE,EACPtD,GAAG0H,eAAe,OAAQH,GAE1BvH,GAAG2H,gBAAgBrE,EAAGiE,EAAGV,aAKjCA,YAAY9E,SAAQ,SAASc,YACnB3B,EAAI,gBAAkB2B,KAAO,KAC7BiE,OAAStF,SAASC,cAAcP,GAClC4F,SACAA,OAAOK,QAAQ,GAAGS,UAAW,SAIzClF,EAAEL,cAAc,IAAIC,MAAM,aASlCtC,GAAGwH,WAAa,SAASK,QAErBrG,SAASM,iBADC,wCACmBC,SAAQ,SAAS6B,gBACpCkE,OAASlE,SAASnC,cACpB,4CAEEsG,OAASnE,SAASnC,cACpB,+BAEAqG,QAAUC,OAAQ,OACZ5G,EAAI2G,OAAOjF,KAAKE,QAAQ,KACxBiF,EAAIF,OAAOjF,KAAKC,OAAO,EAAG3B,MAC5B0G,OAAOG,GAAI,CAEW,GAAlBF,OAAOlF,UACPkF,OAAOlF,SAAU,EACjBkF,OAAOzF,cAAc,IAAIC,MAAM,iBAE7B2F,SAAWJ,OAAOG,GAClBE,OAASH,OAAOtG,cAAc,iBAAmBwG,SAAW,MAC9DC,QAA6B,GAAnBA,OAAON,WACjBM,OAAON,UAAW,QAIA,GAAlBE,OAAOlF,UACPkF,OAAOlF,SAAU,EACjBkF,OAAOzF,cAAc,IAAIC,MAAM,UAC/ByF,OAAOZ,QAAQ,GAAGS,UAAW,QAajD5H,GAAGyH,eAAiB,SAAS5E,KAAMyD,aACzB6B,EAAI,IAAIC,OAAO,IAAMvF,KAAO,iBAC5B3B,EAAI,iCAAmC2B,KAAO,iBACpDrB,SAASM,iBAAiBZ,GAAGa,SAAQ,SAASiB,UACpCqF,EAAIrF,GAAGH,KAAKyF,MAAMH,MACpBE,GAAKA,EAAE,GAAI,KAGPzF,QAAgB,IADT0D,MAAQiC,SAASF,EAAE,WAKxBxD,MAAQ7E,GAAGwI,iBAAiBxF,GAAGR,QAAQ,UAAW,aACpDqC,MAAO,OACDwB,MAAQxB,MAAMpD,cAAc,sBAC9B4E,QACAzD,UAAWyD,MAAMC,UAIrBtD,GAAGJ,SAAWA,eAIlBI,GAAGJ,QAAUA,QACbI,GAAGX,cAAc,IAAIC,MAAM,eAavCtC,GAAG0H,eAAiB,SAAS7E,KAAMyD,aACzBpF,EAAI,UACM,iCAAmC2B,KAAO,WAC7C,4BAA8BA,KAAO,iBACrC,UAEPwD,MAAQ7E,SAASC,cAAcP,EAAEmF,UACzB,OAAVA,aACO,QAGLxB,MAAQ7E,GAAGoG,qBAAqBC,MAAM7D,QAAQtB,EAAE2D,OAAQ3D,EAAE2D,UAClD,OAAVA,aACO,QAGL7B,GAAK6B,MAAMpD,cAAcP,EAAEyF,aACtB,OAAP3D,UACO,EAIQ,IAAfqD,MAAMC,QACND,MAAMC,MAAQA,MACI,GAAdtD,GAAGJ,UACHI,GAAGJ,SAAU,EACbI,GAAGX,cAAc,IAAIC,MAAM,aAiBvCtC,GAAG2H,gBAAkB,SAAS9E,KAAMyD,MAAOO,mBAEjCE,IAAMvF,SAASC,cAAc,UAAYoB,KAAO,SAClDkE,OAGmB,UAAfA,IAAI0B,QAAqB,OAGnBtH,EAAI0F,YAAY9D,QAAQF,MAC1B1B,GAAK,GACL0F,YAAY6B,OAAOvH,EAAG,SAIpBD,EAAI,iBAAmBoF,MAAQ,KAC/B4B,OAASnB,IAAItF,cAAcP,GAG7BgH,QAA6B,GAAnBA,OAAON,WACjBM,OAAON,UAAW,OAIA,SAAfb,IAAI0B,SAAkC,QAAZ1B,IAAI4B,OACrC5B,IAAIT,MAAQA,QAYxBtG,GAAGoG,qBAAuB,SAASW,IAAK6B,UAC9BA,WACFA,SAAW,QAEXC,QAAU9B,IAAI+B,4BACXD,SAAS,IACI,IAAZD,UAAkBC,QAAQE,QAAQH,iBAC3BC,QAEXA,QAAUA,QAAQC,8BAEf,MAUX9I,GAAGwI,iBAAmB,SAASzB,IAAK6B,UAC1BA,WACFA,SAAW,QAEXC,QAAU9B,IAAIb,wBACX2C,SAAS,IACI,IAAZD,UAAkBC,QAAQE,QAAQH,iBAC3BC,QAEXA,QAAUA,QAAQ3C,0BAEf,MAGJlG"}