{"version":3,"file":"form.min.js","sources":["../src/form.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * mod/vocab/tool/questionbank/amd/src/form.js\n *\n * @module     vocabtool_questionbank\n * @copyright  2023 Gordon Bateson (gordon.bateson@gmail.com)\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      Moodle 3.11\n */\n\ndefine(['core/str'], function(STR){\n\n    let JS = {};\n    window.JS = JS;\n\n    /*\n     * Initialize the str object to hold language strings.\n     */\n    JS.str = {};\n\n    /**\n     * Adds a cross-browser event listener to the specified element.\n     *\n     * @param {Element}   obj         The DOM element to attach the event to.\n     * @param {string}    evt         The event type (e.g., 'click', 'input').\n     * @param {Function}  fn          The callback function to execute when the event fires.\n     * @param {boolean}   [useCapture=false] Whether to use capture phase (optional).\n     */\n    JS.add_event_listener = function(obj, evt, fn, useCapture) {\n        if (obj.addEventListener) {\n            obj.addEventListener(evt, fn, (useCapture || false));\n        } else if (obj.attachEvent) {\n            obj.attachEvent('on' + evt, fn);\n        }\n    };\n\n    /**\n     * Initializes all custom JavaScript enhancements on page load.\n     *\n     * Runs setup functions for log selection checkboxes,\n     * dynamic textareas, word selection, and custom name helpers.\n     */\n    JS.init = function() {\n\n        // These functions do not need strings from Moodle.\n        this.init_selectall_logs();\n        this.init_textareas_logs();\n        this.init_selectall_words();\n        this.init_checkboxes_words();\n\n        STR.get_strings([\n            {\"key\": \"addname\", \"component\": \"vocabtool_questionbank\"},\n            {\"key\": \"addtags\", \"component\": \"vocabtool_questionbank\"},\n        ]).done(function(s) {\n            var i = 0;\n            JS.str.addname = s[i++];\n            JS.str.addtags = s[i++];\n            JS.init_custom_names();\n        });\n    };\n\n    /**\n     * Initializes the \"select all logs\" checkbox and makes it visible if hidden.\n     *\n     * Attaches a click handler to toggle all checkboxes within the log fieldset.\n     */\n    JS.init_selectall_logs = function(){\n        const s = 'input[type=\"checkbox\"][name=\"logids[selectall]\"]';\n        const selectall = document.querySelector(s);\n        if (selectall) {\n            JS.add_event_listener(selectall, 'click', JS.onclick_selectall);\n            if (selectall.classList.contains(\"d-none\")) {\n                selectall.classList.remove(\"d-none\");\n            }\n        }\n    };\n\n    /**\n     * Automatically resizes textarea elements for log fields as the user types.\n     *\n     * Targets fields such as error, prompt, and results textareas in the log editing form.\n     */\n    JS.init_textareas_logs = function(){\n        const s = '#id_log_error, #id_log_prompt, #id_log_results';\n        document.querySelectorAll(s).forEach(function(textarea){\n            // Add event listener that adjusts height to accommodate content.\n            JS.add_event_listener(textarea, 'input', function(){\n                this.style.height = 'auto'; // '1px' also works\n                this.style.height = (this.scrollHeight + 6) + 'px';\n            });\n            textarea.dispatchEvent(new Event('input'));\n        });\n    };\n\n    /**\n     * Initializes the \"select all words\" checkbox and repositions its label.\n     *\n     * Attaches a click handler and restyles the label to enhance appearance and usability.\n     */\n    JS.init_selectall_words = function(){\n        const s = 'input[type=\"checkbox\"][name=\"selectedwords[selectall]\"]';\n        const selectall = document.querySelector(s);\n        if (selectall) {\n\n            JS.add_event_listener(selectall, 'click', JS.onclick_selectall);\n\n            const label = selectall.closest('label');\n            if (label) {\n                if (label.classList.contains('d-none')) {\n                    label.classList.remove('d-none');\n                }\n                label.classList.add('btn', 'btn-light', 'border-dark');\n                label.classList.add('align-self-start', 'px-2', 'py-0');\n\n                const p = label.closest('.fcontainer').querySelector('.col-form-label p');\n                if (p) {\n                    p.replaceWith(label);\n                }\n            }\n        }\n    };\n\n    /**\n     * Handles toggling of all checkboxes in a group when \"select all\" is clicked.\n     *\n     * Updates the state of checkboxes with the same name prefix and adjusts the label text\n     * based on data attributes (`data-selectall` and `data-deselectall`).\n     *\n     * @returns {boolean} Always returns true.\n     */\n    JS.onclick_selectall = function(){\n        const checked = this.checked;\n\n        // Check/uncheck all other checkboxes in this fieldset\n        // that have the same name prefix, e.g. \"selectedwords\".\n        const nameprefix = this.name.substr(0, this.name.indexOf('['));\n        const s = 'input[type=\"checkbox\"][name^=\"' + nameprefix + '\"]';\n        this.closest('fieldset').querySelectorAll(s).forEach(function(cb){\n            cb.checked = checked;\n        });\n\n        // Set new text for this checkbox.\n        let txt = '';\n        if (checked) {\n            txt = this.dataset.deselectall || '';\n        } else {\n            txt = this.dataset.selectall || '';\n        }\n        if (txt) {\n            // Locate the label for this checkbox.\n            const label = this.closest('label');\n            if (label) {\n                // Remove existing text nodes in this label.\n                for (let i = (label.childNodes.length - 1); i >= 0 ; i--) {\n                    const n = label.childNodes[i];\n                    if (n.nodeType == 3) {\n                        label.removeChild(n);\n                    }\n                }\n                // Add new text in a node at the end of the label.\n                label.appendChild(document.createTextNode(txt));\n            }\n        }\n        return true;\n    };\n\n    /**\n     * Attaches click event listeners to individual word selection checkboxes.\n     *\n     * Enables shift-click selection and click tracking for batch operations.\n     */\n    JS.init_checkboxes_words = function(){\n        const s = 'input[type=\"checkbox\"][name^=\"selectedwords\"]';\n        document.querySelectorAll(s).forEach(function(cb){\n            JS.add_event_listener(cb, 'click', JS.onclick_checkbox);\n        });\n    };\n\n    /**\n     * Handles checkbox click events for word selection, including shift-click support.\n     *\n     * Supports selecting a range of checkboxes when holding Shift, and tracks the\n     * last clicked checkbox using a `data-clicked` attribute.\n     *\n     * @param {MouseEvent} evt The click event object.\n     */\n    JS.onclick_checkbox = function(evt){\n\n        const felement = this.closest('.felement');\n        if (felement === null) {\n            return true;\n        }\n\n        const checkboxes = 'input[type=\"checkbox\"]';\n        const dataclicked = checkboxes + '[data-clicked=\"1\"]';\n\n        const cb_start = felement.querySelector(dataclicked);\n        const cb_stop = evt.currentTarget;\n\n        let unclickall = false;\n        let clickme = true;\n\n        if (evt.shiftKey) {\n            if (cb_start) {\n                let found = false;\n                let startstop = false;\n                felement.querySelectorAll(checkboxes).forEach(function(cb){\n                    startstop = (cb == cb_start || cb == cb_stop);\n                    if (found || startstop) {\n                        cb.checked = evt.currentTarget.checked;\n                        if (startstop) {\n                            found = (found ? false : true);\n                        }\n                    }\n\n                });\n                unclickall = true;\n            } else {\n                clickme = true;\n            }\n        } else {\n            unclickall = true;\n            clickme = true;\n        }\n\n        if (unclickall) {\n            felement.querySelectorAll(dataclicked).forEach(function(cb){\n                cb.removeAttribute('data-clicked');\n            });\n        }\n\n        if (clickme) {\n            evt.currentTarget.setAttribute('data-clicked', '1');\n        }\n    };\n\n    /**\n     * Sets up custom name buttons for both subcategory and question tag inputs.\n     *\n     * Calls init_custom_name() with appropriate selectors to initialize UI enhancements\n     * for subcategory and tag entry fields.\n     */\n    JS.init_custom_names = function(){\n        JS.init_custom_name(\"[name='subcat[name]']\", \".subcatnames\", \"addname\");\n        JS.init_custom_name(\"[name='qtag[name]']\", \".tagnames\", \"addtags\");\n    };\n\n    /**\n     * Enhances a custom name input by displaying a list of previously used names with a button.\n     *\n     * This function searches the log table for matching name entries, builds a summary string,\n     * and injects a button + label near the specified input field. Clicking the button inserts\n     * the names into the input and ensures the associated checkbox is checked.\n     *\n     * @param {string} sourceselector CSS selector for the input[type=\"text\"] element to target.\n     * @param {string} targetselector CSS selector for the <ul> elements containing <li> items with previous names.\n     * @param {string} strname the name of the STR item to use as button text.\n     */\n    JS.init_custom_name = function(sourceselector, targetselector, strname){\n        let elm = document.querySelector(sourceselector);\n        let fitem = elm.closest(\".fitem\");\n        let table = document.querySelector(\"#questionbanklog_table\");\n        let allnames = []; // Cache of customnames.\n        table.querySelectorAll(targetselector).forEach(function(ul){\n            let names = [];\n            ul.querySelectorAll(\"li\").forEach(function(li){\n                names.push(li.innerText);\n            });\n            if (names.length) {\n                names = names.join(\", \");\n                if (allnames.indexOf(names) < 0) {\n                    allnames.push(names);\n\n                    let separator = Object.assign(document.createElement(\"span\"), {\n                        \"className\": \"w-100\",\n                    });\n                    let div = Object.assign(document.createElement(\"div\"), {\n                        \"className\": \"rounded border border-warning bg-light ml-4 my-1 pr-2 customnames\",\n                    });\n                    div.appendChild(\n                        Object.assign(document.createElement(\"button\"), {\n                            \"className\": \"btn btn-warning ml-0 py-1 px-2\",\n                            \"onclick\": JS.onclick_add_tags,\n                            \"textContent\": JS.str[strname],\n                        })\n                    );\n                    div.appendChild(\n                        Object.assign(document.createElement(\"span\"), {\n                            \"className\": \"ml-2\",\n                            \"textContent\": names,\n                        })\n                    );\n                    fitem.parentNode.insertBefore(separator, fitem.nextSibling);\n                    separator.parentNode.insertBefore(div, separator.nextSibling);\n                }\n            }\n        });\n    };\n\n    /**\n     * Handles click event on the \"Add tags\" button.\n     *\n     * Transfers a list of names from the adjacent <span> into the associated text input field\n     * in the same .fitem block. Also locates the previous .fitem containing a checkbox\n     * and ensures it is checked. Finally, the button is blurred to remove focus.\n     *\n     * @param {MouseEvent} evt The click event object.\n     */\n    JS.onclick_add_tags = function(evt) {\n        evt.preventDefault();\n\n        let btn = evt.currentTarget;\n        let div = btn.closest(\".customnames\");\n        let span = btn.nextElementSibling;\n        if (div && span) {\n\n            let inputfitem = JS.get_previous_sibling(div, \".fitem\");\n            if (inputfitem) {\n\n                let input = inputfitem.querySelector(\"input[type='text']\");\n                if (input) {\n\n                    // Transfer previously used names to the input element.\n                    input.value = span.textContent.trim();\n\n                    // Switch off the disabled flag.\n                    if (input.disabled) {\n                        input.disabled = false;\n                    }\n\n                    // Locate previous inputfitem sibling.\n                    let checkboxfitem = JS.get_previous_sibling(inputfitem, \".fitem\");\n                    if (checkboxfitem) {\n                        let checkbox = checkboxfitem.querySelector(\"input[type='checkbox']\");\n                        if (checkbox) {\n                            checkbox.checked = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        btn.blur();\n        return false;\n    };\n\n    /**\n     * Finds the closest previous sibling that matches a given selector.\n     *\n     * If no selector is provided, returns the nearest previous sibling regardless of type.\n     *\n     * @param {Element} elm        The starting element.\n     * @param {string} [selector]  Optional CSS selector to match against.\n     * @returns {Element|null} The matched previous sibling element, or null if none found.\n     */\n    JS.get_previous_sibling = function(elm, selector){\n        if (! selector) {\n            selector = \"\";\n        }\n        let sibling = elm.previousElementSibling;\n        while (sibling) {\n            if (selector == \"\" || sibling.matches(selector)) {\n                return sibling;\n            }\n            sibling = sibling.previousElementSibling;\n        }\n        return null;\n    };\n\n    return JS;\n});"],"names":["define","STR","JS","window","str","add_event_listener","obj","evt","fn","useCapture","addEventListener","attachEvent","init","init_selectall_logs","init_textareas_logs","init_selectall_words","init_checkboxes_words","get_strings","done","s","i","addname","addtags","init_custom_names","selectall","document","querySelector","onclick_selectall","classList","contains","remove","querySelectorAll","forEach","textarea","style","height","this","scrollHeight","dispatchEvent","Event","label","closest","add","p","replaceWith","checked","name","substr","indexOf","cb","txt","dataset","deselectall","childNodes","length","n","nodeType","removeChild","appendChild","createTextNode","onclick_checkbox","felement","dataclicked","checkboxes","cb_start","cb_stop","currentTarget","unclickall","clickme","shiftKey","found","startstop","removeAttribute","setAttribute","init_custom_name","sourceselector","targetselector","strname","fitem","table","allnames","ul","names","li","push","innerText","join","separator","Object","assign","createElement","div","onclick_add_tags","parentNode","insertBefore","nextSibling","preventDefault","btn","span","nextElementSibling","inputfitem","get_previous_sibling","input","value","textContent","trim","disabled","checkboxfitem","checkbox","blur","elm","selector","sibling","previousElementSibling","matches"],"mappings":"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"}