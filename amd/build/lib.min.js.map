{"version":3,"file":"lib.min.js","sources":["../src/lib.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * mod/vocab/ai/prompts/amd/src/form.LIB\n *\n * A module that provides utility functions for handling DOM elements, such as\n * dynamically adjusting input text widths and textarea heights.\n *\n * @module     vocabai_prompts\n * @copyright  2023 Gordon Bateson (gordon.bateson@gmail.com)\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      Moodle 3.11\n */\n\ndefine([], function() {\n    let LIB = {};\n\n    /**\n     * Adds an event listener to a DOM element.\n     * @param {Element} obj - The DOM element to which the event listener is added.\n     * @param {string} evt - The name of the event (e.g., \"click\", \"input\").\n     * @param {Function} fn - The callback function to execute when the event is triggered.\n     * @param {boolean} [useCapture=false] - Specifies whether to use event capturing or bubbling.\n     */\n    LIB.add_event_listener = function(obj, evt, fn, useCapture) {\n        if (obj.addEventListener) {\n            obj.addEventListener(evt, fn, (useCapture || false));\n        } else if (obj.attachEvent) {\n            obj.attachEvent('on' + evt, fn);\n        }\n    };\n\n    /**\n     * Determines if a given element is within a collapsed fieldset.\n     * @param {Element} elm - The DOM element to check.\n     * @returns {boolean} `true` if the element is within a collapsed fieldset; otherwise, `false`.\n     */\n    LIB.is_collapsed = function(elm) {\n        const fieldset = elm.closest(\"fieldset.collapsible\");\n        return (fieldset && fieldset.matches(\".collapsed\"));\n    };\n\n    /**\n     * Dynamically gets the width or height of an element based on its content.\n     * @param {Element} elm - The DOM element to adjust (input or textarea).\n     * @param {string} dimension - The dimension to adjust (\"width\" or \"height\").\n     * @return {integer} the estimated size of the element.\n     */\n    LIB.get_dimension = function(elm, dimension) {\n        if (dimension == 'width') {\n            elm.style.width = \"auto\";\n            return elm.scrollWidth;\n        }\n        if (dimension == 'height') {\n            elm.style.height = \"auto\";\n            return elm.scrollHeight;\n        }\n        return 0;\n    };\n\n    /**\n     * Attempt to guess the width or height of a hidden/collapsed element based on its content.\n     * This is done by creating a temporary element of the same type as the original element,\n     * then copying across the content and obtaining the size of the appropriate dimension.\n     * @param {Element} elm - The DOM element to adjust (input or textarea).\n     * @param {string} dimension - The dimension to adjust (\"width\" or \"height\").\n     * @return {integer} the estimated size of the element, if it were not hidden/collapsed.\n     */\n    LIB.guess_dimension = function(elm, dimension) {\n        const tmp = document.createElement(elm.tagName);\n        if (elm.hasAttribute('type')) {\n            tmp.type = elm.type;\n        }\n        if (elm.hasAttribute('value')) {\n            tmp.value = elm.value;\n        }\n        if (elm.hasAttribute('class') || elm.hasAttribute('className')) {\n            tmp.className = elm.className;\n        }\n        tmp.style.visibility = 'hidden';\n\n        // Add the tmp element to the document and get the dimension value.\n        document.body.appendChild(tmp);\n        let value = LIB.get_dimension(tmp, dimension);\n\n        // Compensate for border and padding on the original element.\n        const cs = window.getComputedStyle(elm);\n        if (cs.boxSizing == 'content-box') {\n            if (dimension == 'width') {\n                value += parseInt(cs.borderLeft) + parseInt(cs.borderRight);\n                value += parseInt(cs.paddingLeft) + parseInt(cs.paddingRight);\n            } else {\n                value += parseInt(cs.borderTop) + parseInt(cs.borderBottom);\n                value += parseInt(cs.paddingTop) + parseInt(cs.paddingBottom);\n            }\n        }\n\n        tmp.remove();\n        return value;\n    };\n\n    /**\n     * Dynamically sets the width or height of an element based on its content.\n     * @param {Element} elm - The DOM element to adjust (input or textarea).\n     * @param {string} dimension - The dimension to adjust (\"width\" or \"height\").\n     * @param {integer} value - The new value for the specified dimension. If omitted, it will be set based on the content's size.\n     * @return {void} - No value is returned, but the dimension value for the given element may be updated.\n     */\n    LIB.set_dimension = function(elm, dimension, value) {\n        if (elm.value) {\n            if (value === undefined) {\n                if (LIB.is_collapsed(elm)) {\n                    value = LIB.guess_dimension(elm, dimension);\n                } else {\n                    value = LIB.get_dimension(elm, dimension);\n                }\n            }\n            if (value) {\n                elm.style[dimension] = (value + 6) + 'px';\n            }\n        }\n    };\n\n    /**\n     * Dynamically sets the width or height of one or more elements based on content dimensions.\n     * @param {string[]|string} ids - An array of element IDs or a comma-separated string of IDs.\n     * @return {void} - No value is returned, but the dimensions of the given elements may be updated.\n     */\n    LIB.setup_dimensions = function(ids) {\n        if (typeof(ids) === 'string') {\n            ids = ids.split(',').map((id) => id.trim());\n        }\n        ids.forEach(function(id){\n            const elm = document.getElementById(id);\n            if (elm) {\n                let dimension = '';\n                if (elm.tagName == 'INPUT') {\n                    if (elm.type == 'text') {\n                        dimension = 'width';\n                    }\n                } else if (elm.tagName == 'TEXTAREA') {\n                    dimension = 'height';\n                }\n                if (dimension) {\n                    LIB.add_event_listener(elm, 'input', function(evt) {\n                        LIB.set_dimension(evt.target, dimension);\n                    });\n                    LIB.set_dimension(elm, dimension);\n                }\n            }\n        });\n    };\n\n    return LIB;\n});\n\n"],"names":["define","LIB","obj","evt","fn","useCapture","addEventListener","attachEvent","elm","fieldset","closest","matches","dimension","style","width","scrollWidth","height","scrollHeight","tmp","document","createElement","tagName","hasAttribute","type","value","className","visibility","body","appendChild","get_dimension","cs","window","getComputedStyle","boxSizing","parseInt","borderLeft","borderRight","paddingLeft","paddingRight","borderTop","borderBottom","paddingTop","paddingBottom","remove","undefined","is_collapsed","guess_dimension","ids","split","map","id","trim","forEach","getElementById","add_event_listener","set_dimension","target"],"mappings":";;;;;;;;;;;AA2BAA,uBAAO,IAAI,eACHC,IAAM,CASVA,mBAAyB,SAASC,IAAKC,IAAKC,GAAIC,YACxCH,IAAII,iBACJJ,IAAII,iBAAiBH,IAAKC,GAAKC,aAAc,GACtCH,IAAIK,aACXL,IAAIK,YAAY,KAAOJ,IAAKC,KASpCH,aAAmB,SAASO,WAClBC,SAAWD,IAAIE,QAAQ,+BACrBD,UAAYA,SAASE,QAAQ,eASzCV,cAAoB,SAASO,IAAKI,iBACb,SAAbA,WACAJ,IAAIK,MAAMC,MAAQ,OACXN,IAAIO,aAEE,UAAbH,WACAJ,IAAIK,MAAMG,OAAS,OACZR,IAAIS,cAER,GAWXhB,gBAAsB,SAASO,IAAKI,iBAC1BM,IAAMC,SAASC,cAAcZ,IAAIa,SACnCb,IAAIc,aAAa,UACjBJ,IAAIK,KAAOf,IAAIe,MAEff,IAAIc,aAAa,WACjBJ,IAAIM,MAAQhB,IAAIgB,QAEhBhB,IAAIc,aAAa,UAAYd,IAAIc,aAAa,gBAC9CJ,IAAIO,UAAYjB,IAAIiB,WAExBP,IAAIL,MAAMa,WAAa,SAGvBP,SAASQ,KAAKC,YAAYV,SACtBM,MAAQvB,IAAI4B,cAAcX,IAAKN,iBAG7BkB,GAAKC,OAAOC,iBAAiBxB,WACf,eAAhBsB,GAAGG,YACc,SAAbrB,WACAY,OAASU,SAASJ,GAAGK,YAAcD,SAASJ,GAAGM,aAC/CZ,OAASU,SAASJ,GAAGO,aAAeH,SAASJ,GAAGQ,gBAEhDd,OAASU,SAASJ,GAAGS,WAAaL,SAASJ,GAAGU,cAC9ChB,OAASU,SAASJ,GAAGW,YAAcP,SAASJ,GAAGY,iBAIvDxB,IAAIyB,SACGnB,OAUXvB,cAAoB,SAASO,IAAKI,UAAWY,OACrChB,IAAIgB,aACUoB,IAAVpB,QAEIA,MADAvB,IAAI4C,aAAarC,KACTP,IAAI6C,gBAAgBtC,IAAKI,WAEzBX,IAAI4B,cAAcrB,IAAKI,YAGnCY,QACAhB,IAAIK,MAAMD,WAAcY,MAAQ,EAAK,QAUjDvB,iBAAuB,SAAS8C,KACR,iBAATA,MACPA,IAAMA,IAAIC,MAAM,KAAKC,KAAKC,IAAOA,GAAGC,UAExCJ,IAAIK,SAAQ,SAASF,UACX1C,IAAMW,SAASkC,eAAeH,OAChC1C,IAAK,KACDI,UAAY,GACG,SAAfJ,IAAIa,QACY,QAAZb,IAAIe,OACJX,UAAY,SAEM,YAAfJ,IAAIa,UACXT,UAAY,UAEZA,YACAX,IAAIqD,mBAAmB9C,IAAK,SAAS,SAASL,KAC1CF,IAAIsD,cAAcpD,IAAIqD,OAAQ5C,cAElCX,IAAIsD,cAAc/C,IAAKI,yBAMhCX"}